/* SigmaStar trade secret */
/* Copyright (c) [2019~2020] SigmaStar Technology.
All rights reserved.

Unless otherwise stipulated in writing, any and all information contained
herein regardless in any format shall remain the sole proprietary of
SigmaStar and be kept in strict confidence
(SigmaStar Confidential Information) by the recipient.
Any unauthorized act including without limitation unauthorized disclosure,
copying, use, reproduction, sale, distribution, modification, disassembling,
reverse engineering and compiling of the contents of SigmaStar Confidential
Information is unlawful and strictly prohibited. SigmaStar hereby reserves the
rights to any and all damages, losses, costs and expenses resulting therefrom.
*/
#ifndef _GC4653_INIT_TABLE_H_

#define _GC4653_PDWN_ON_ 0
#define _GC4653_RST_ON_ 0

//static CMDQ_CMDS gTable[] __attribute__((aligned(8))) =
static SENSOR_INIT_TABLE Sensor_init_table[] __attribute__((aligned(8)))=
{
#if defined(SENSOR_INIT_CMDQ_MODE)
    /*set cmdq0 busy*/
    CMDQ_REG_DUMMY(CMDQ_STATUS_BUSY),
    VIF_REG_DUMMY(CMDQ_STATUS_BUSY),

    /*sensor reset*/
    SNR_PDWN(_GC4653_PDWN_ON_),     //power off
    CMDQ_DELAY_MS(1),             //T1 delay 1ms
    SNR_RST(_GC4653_RST_ON_),       //reset  off
    CMDQ_DELAY_MS(1),             //T1 delay 1ms
    SNR_PDWN(~_GC4653_PDWN_ON_),    //power on
    CMDQ_DELAY_MS(1),   //T2 delay 2ms
    SNR_RST(~_GC4653_RST_ON_),       //reset  on
    CMDQ_DELAY_MS(1),  //T3 delay 1ms

    SNR_MCLK_EN(0x0), //MCLK //0x0=MCLK 27MhZ, 0xB=37.125MHz
    CMDQ_DELAY_MS(1),     //T4 delay 2ms

    /*I2C timing*/
    I2CM_CLK_EN(0x2),  //12MHz

    I2CM_PARAM(16,11,50,50,0,11),
#endif

    I2CM_2A1D_W(0x52,0x03fe, 0xf0),
    I2CM_2A1D_W(0x52,0x03fe, 0x00),
    I2CM_2A1D_W(0x52,0x0317, 0x00),
    I2CM_2A1D_W(0x52,0x0320, 0x77),
    I2CM_2A1D_W(0x52,0x0324, 0xc8),
    I2CM_2A1D_W(0x52,0x0325, 0x06),
    I2CM_2A1D_W(0x52,0x0326, 0x60),
    I2CM_2A1D_W(0x52,0x0327, 0x03),
    I2CM_2A1D_W(0x52,0x0334, 0x40),
    I2CM_2A1D_W(0x52,0x0336, 0x60),
    I2CM_2A1D_W(0x52,0x0337, 0x82),
    I2CM_2A1D_W(0x52,0x0315, 0x25),
    I2CM_2A1D_W(0x52,0x031c, 0xc6),
    I2CM_2A1D_W(0x52,0x0287, 0x18),
    I2CM_2A1D_W(0x52,0x0084, 0x00),
    I2CM_2A1D_W(0x52,0x0087, 0x50),
    I2CM_2A1D_W(0x52,0x029d, 0x08),
    I2CM_2A1D_W(0x52,0x0290, 0x00),
    I2CM_2A1D_W(0x52,0x0340, 0x05),
    I2CM_2A1D_W(0x52,0x0341, 0xdc),
    I2CM_2A1D_W(0x52,0x0345, 0x06),
    I2CM_2A1D_W(0x52,0x034b, 0xb0),
    I2CM_2A1D_W(0x52,0x0352, 0x08),
    I2CM_2A1D_W(0x52,0x0354, 0x08),
    I2CM_2A1D_W(0x52,0x02d1, 0xb0),
    I2CM_2A1D_W(0x52,0x023c, 0x05),
    I2CM_2A1D_W(0x52,0x0223, 0xfb),
    I2CM_2A1D_W(0x52,0x0232, 0xc4),
    I2CM_2A1D_W(0x52,0x0279, 0x53),
    I2CM_2A1D_W(0x52,0x02d3, 0x01),
    I2CM_2A1D_W(0x52,0x0243, 0x06),
    I2CM_2A1D_W(0x52,0x02ce, 0xbf),
    I2CM_2A1D_W(0x52,0x02ee, 0x30),
    I2CM_2A1D_W(0x52,0x026f, 0x70),
    I2CM_2A1D_W(0x52,0x0257, 0x09),
    I2CM_2A1D_W(0x52,0x0211, 0x02),
    I2CM_2A1D_W(0x52,0x0219, 0x09),
    I2CM_2A1D_W(0x52,0x023f, 0x2d),
    I2CM_2A1D_W(0x52,0x0518, 0x00),
    I2CM_2A1D_W(0x52,0x0519, 0x01),
    I2CM_2A1D_W(0x52,0x0515, 0x08),
    I2CM_2A1D_W(0x52,0x02d9, 0x3f),
    I2CM_2A1D_W(0x52,0x02da, 0x02),
    I2CM_2A1D_W(0x52,0x02db, 0xe8),
    I2CM_2A1D_W(0x52,0x02e6, 0x20),
    I2CM_2A1D_W(0x52,0x021b, 0x10),
    I2CM_2A1D_W(0x52,0x0252, 0x22),
    I2CM_2A1D_W(0x52,0x024e, 0x22),
    I2CM_2A1D_W(0x52,0x02c4, 0x01),
    I2CM_2A1D_W(0x52,0x021d, 0x07),
    I2CM_2A1D_W(0x52,0x024a, 0x01),
    I2CM_2A1D_W(0x52,0x02ca, 0x02),
    I2CM_2A1D_W(0x52,0x0262, 0x10),
    I2CM_2A1D_W(0x52,0x029a, 0x20),
    I2CM_2A1D_W(0x52,0x021c, 0x0e),
    I2CM_2A1D_W(0x52,0x0298, 0x03),
    I2CM_2A1D_W(0x52,0x029c, 0x00),
    I2CM_2A1D_W(0x52,0x027e, 0x14),
    I2CM_2A1D_W(0x52,0x02c2, 0x10),
    I2CM_2A1D_W(0x52,0x0540, 0x20),
    I2CM_2A1D_W(0x52,0x0546, 0x01),
    I2CM_2A1D_W(0x52,0x0548, 0x01),
    I2CM_2A1D_W(0x52,0x0544, 0x01),
    I2CM_2A1D_W(0x52,0x0242, 0x1b),
    I2CM_2A1D_W(0x52,0x02c0, 0x1b),
    I2CM_2A1D_W(0x52,0x02c3, 0x20),
    I2CM_2A1D_W(0x52,0x02e4, 0x10),
    I2CM_2A1D_W(0x52,0x022e, 0x00),
    I2CM_2A1D_W(0x52,0x027b, 0x3f),
    I2CM_2A1D_W(0x52,0x0269, 0x0f),
    I2CM_2A1D_W(0x52,0x02d2, 0x40),
    I2CM_2A1D_W(0x52,0x027c, 0x08),
    I2CM_2A1D_W(0x52,0x023a, 0x2e),
    I2CM_2A1D_W(0x52,0x0245, 0xce),
    I2CM_2A1D_W(0x52,0x0530, 0x20),
    I2CM_2A1D_W(0x52,0x0531, 0x02),
    I2CM_2A1D_W(0x52,0x0228, 0x28),
    I2CM_2A1D_W(0x52,0x02ab, 0x00),
    I2CM_2A1D_W(0x52,0x0250, 0x00),
    I2CM_2A1D_W(0x52,0x0221, 0x28),
    I2CM_2A1D_W(0x52,0x02ac, 0x00),
    I2CM_2A1D_W(0x52,0x02a5, 0x02),
    I2CM_2A1D_W(0x52,0x0260, 0x0b),
    I2CM_2A1D_W(0x52,0x0216, 0x04),
    I2CM_2A1D_W(0x52,0x0299, 0x1C),
    I2CM_2A1D_W(0x52,0x02bb, 0x0d),
    I2CM_2A1D_W(0x52,0x02a3, 0x02),
    I2CM_2A1D_W(0x52,0x02a4, 0x02),
    I2CM_2A1D_W(0x52,0x021e, 0x02),
    I2CM_2A1D_W(0x52,0x024f, 0x08),
    I2CM_2A1D_W(0x52,0x028c, 0x08),
    I2CM_2A1D_W(0x52,0x0532, 0x3f),
    I2CM_2A1D_W(0x52,0x0533, 0x02),
    I2CM_2A1D_W(0x52,0x0277, 0x38),
    I2CM_2A1D_W(0x52,0x0276, 0x60),
    I2CM_2A1D_W(0x52,0x0239, 0xc0),
    I2CM_2A1D_W(0x52,0x0202, 0x05),
    I2CM_2A1D_W(0x52,0x0203, 0xd0),
    I2CM_2A1D_W(0x52,0x0205, 0xc0),
    I2CM_2A1D_W(0x52,0x02b0, 0x60), //0x90
    I2CM_2A1D_W(0x52,0x0002, 0xa9),
    I2CM_2A1D_W(0x52,0x0004, 0x01),
    I2CM_2A1D_W(0x52,0x0342, 0x06),
    I2CM_2A1D_W(0x52,0x0343, 0x40),
    I2CM_2A1D_W(0x52,0x03fe, 0x10),
    I2CM_2A1D_W(0x52,0x03fe, 0x00),
    I2CM_2A1D_W(0x52,0x0106, 0x78),
    I2CM_2A1D_W(0x52,0x0108, 0x0c),
    I2CM_2A1D_W(0x52,0x0114, 0x01),
    I2CM_2A1D_W(0x52,0x0115, 0x10),
    I2CM_2A1D_W(0x52,0x0180, 0x46),
    I2CM_2A1D_W(0x52,0x0181, 0x30),
    I2CM_2A1D_W(0x52,0x0182, 0x05),
    I2CM_2A1D_W(0x52,0x0185, 0x01),
    I2CM_2A1D_W(0x52,0x03fe, 0x10),
    I2CM_2A1D_W(0x52,0x03fe, 0x00),
    I2CM_2A1D_W(0x52,0x0100, 0x09),

#if defined(SENSOR_INIT_CMDQ_MODE)
    /*Sensor runtime parameter*/
    SNR_SHUTTER_FPS_2A1D(0x52, 10000, 30000),   //shutter 10ms , fps 30
    SNR_GAIN_2A1D(0x52, 1024),
#endif

#if defined(SENSOR_INIT_CMDQ_MODE)
    /*set cmdq0 idle*/
    CMDQ_REG_DUMMY(CMDQ_STATUS_READY),
    VIF_REG_DUMMY(CMDQ_STATUS_READY),

    /*append dummy*/
    //CMDQ_TAG('EOT'),    //end of table
    CMDQ_NULL(),
    CMDQ_NULL(),
    CMDQ_NULL(),
    CMDQ_NULL(),
#endif
};

#endif
