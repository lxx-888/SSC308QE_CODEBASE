/* SigmaStar trade secret */
/* Copyright (c) [2019~2020] SigmaStar Technology.
All rights reserved.

Unless otherwise stipulated in writing, any and all information contained
herein regardless in any format shall remain the sole proprietary of
SigmaStar and be kept in strict confidence
(SigmaStar Confidential Information) by the recipient.
Any unauthorized act including without limitation unauthorized disclosure,
copying, use, reproduction, sale, distribution, modification, disassembling,
reverse engineering and compiling of the contents of SigmaStar Confidential
Information is unlawful and strictly prohibited. SigmaStar hereby reserves the
rights to any and all damages, losses, costs and expenses resulting therefrom.
*/

#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include "ss_auto_lock.h"
#include "amigos_database_json.h"

#define DBG_PRINT 0
nlohmann::json AmigosDatabaseJson::Json;

#define USING_OBJ(__dst_json)                                     \
    do                                                            \
    {                                                             \
        if (!(__dst_json))                                        \
        {                                                         \
            (__dst_json) = &AmigosDatabaseJson::Json[strSection]; \
        }                                                         \
    } while (0)

nlohmann::json *AmigosDatabaseJson::GetJsonObj()
{
    auto iter = AmigosDatabaseJson::Json.find(strSection);
    if (iter == AmigosDatabaseJson::Json.end())
    {
        AMILOG_ERR << GetSection() << ": Can not find JSON Obj, Key: " << strSection << COLOR_ENDL;
        return nullptr;
    }
    return &iter.value();
}
nlohmann::json *AmigosDatabaseJson::GetJsonObj(const std::string &strKey)
{
    USING_OBJ(dstJson);
    auto iter = dstJson->find(strKey);
    if (iter == dstJson->end())
    {
        AMILOG_ERR << GetSection() << ": Can not find JSON Obj, Key: " << strKey<< COLOR_ENDL;
        return NULL;
    }
    return &iter.value();
}
int AmigosDatabaseJson::GetJsonValue(const nlohmann::json &jsonObj, const std::string &strKey, std::string &strVal)
{
    auto iter = jsonObj.find(strKey);
    if (iter == jsonObj.end())
    {
        AMILOG_ERR << GetSection() << ": Can not find JSON Val, Key: " << strKey << COLOR_ENDL;
        AMILOG_ERR << "\"Amigos\" application can only use the json generated by the correctly config BWTools." << COLOR_ENDL;
        AMILOG_ERR << "If your see this indicate that your BWTool's json files in the path \"BWTool/setting/\" on your PC are not matched," << COLOR_ENDL;
        AMILOG_ERR << "please update the proper json files from \"/customer/amigos/preview/setting\" on your board." << COLOR_ENDL;
        AMILOG_ERR << "If your want know more information, please access the Sigmastar's inner webside :" << COLOR_ENDL;
        AMILOG_ERR << "http://sswiki:8090/pages/viewpage.action?pageId=62539193" << COLOR_ENDL;
        AMILOG_ERR << "If you are Sigmastar's customer, please contact your technique support." << COLOR_ENDL;
        assert(0);
    }
    strVal = iter.value();
    return 0;
}
AmigosDatabaseJson::AmigosDatabaseJson(const std::string &section) : AmigosDatabase(section)
{
    dstJson = NULL;
}
AmigosDatabaseJson::~AmigosDatabaseJson()
{
}
unsigned int AmigosDatabaseJson::GetRootLoopId(unsigned int uintId)
{
    const nlohmann::json *targetJson = GetJsonObj();
    if (!targetJson)
    {
        return LOOP_ID_END;
    }
    if (LOOP_ID_START == uintId)
    {
        return 0;
    }
    uintId++;
    return targetJson->size() > uintId ? uintId : LOOP_ID_END;
}
std::string AmigosDatabaseJson::GetRootEntryBlock(unsigned int uintId)
{
    const nlohmann::json *targetJson = GetJsonObj();
    std::string retName ;
    if (!targetJson || targetJson->size() <= uintId)
    {
        return "";
    }
    GetJsonValue(targetJson->at(uintId), "NAME", retName);
    return retName;
}
unsigned int AmigosDatabaseJson::GetRootChipId(unsigned int uintId)
{
    const nlohmann::json *targetJson = GetJsonObj();
    std::string strChip;
    if (!targetJson || targetJson->size() <= uintId
        || GetJsonValue(targetJson->at(uintId), "CHIP", strChip) == -1)
    {
        return 0;
    }
    return (unsigned int)Atoi(strChip);
}
bool AmigosDatabaseJson::GetRootDelayPass(unsigned int uintId)
{
    const nlohmann::json *targetJson = GetJsonObj();
    std::string strChip;
    if (!targetJson || targetJson->size() <= uintId
        || GetJsonValue(targetJson->at(uintId), "DELAY", strChip) == -1)
    {
        return 0;
    }
    return (unsigned int)Atoi(strChip);
}
unsigned int AmigosDatabaseJson::GetInLoopId(unsigned int uintId)
{
    const nlohmann::json *targetJson = GetJsonObj();
    unsigned int uintStartId = 0;
    std::stringstream ss;
    if (!targetJson)
    {
        return LOOP_ID_END;
    }
    if (uintId >= LOOP_ID_END)
    {
        return LOOP_ID_END;
    }
    if (LOOP_ID_START != uintId)
    {
        uintStartId = uintId + 1;
    }
    for (unsigned int i = uintStartId; i < MAX_LOOP_CNT; i++)
    {
        ss << "IN_" << i;
        if (targetJson->find(ss.str()) != targetJson->end())
        {
            return i;
        }
        ss.str("");
    }
    return LOOP_ID_END;
}
unsigned int AmigosDatabaseJson::GetOutLoopId(unsigned int uintId)
{
    const nlohmann::json *targetJson = GetJsonObj();
    unsigned int uintStartId = 0;
    std::stringstream ss;
    if (!targetJson)
    {
        return LOOP_ID_END;
    }
    if (uintId >= LOOP_ID_END)
    {
        return LOOP_ID_END;
    }
    if (LOOP_ID_START != uintId)
    {
        uintStartId = uintId + 1;
    }
    for (unsigned int i = uintStartId; i < MAX_LOOP_CNT; i++)
    {
        ss << "OUT_" << i;
        if (targetJson->find(ss.str()) != targetJson->end())
        {
            return i;
        }
        ss.str("");
    }
    return LOOP_ID_END;
}
int AmigosDatabaseJson::GetValInt(const char *keyVal, int intDef)
{
    std::string strValue;

    USING_OBJ(dstJson);
    if (GetJsonValue(*dstJson, keyVal, strValue) == -1)
    {
        dstJson = NULL;
        return intDef;
    }
    dstJson = NULL;
#if DBG_PRINT
    AMILOG_INFO << keyVal << "=" << '['  << strValue << ']' << COLOR_ENDL;
#endif
    return (int)Atoi(strValue);
}
unsigned int AmigosDatabaseJson::GetValUint(const char *keyVal, unsigned int uintDef)
{
    std::string strValue;

    USING_OBJ(dstJson);
    if (GetJsonValue(*dstJson, keyVal, strValue) == -1)
    {
        dstJson = NULL;
        return uintDef;
    }
    dstJson = NULL;
#if DBG_PRINT
    AMILOG_INFO << keyVal << "=" << '['  << strValue << ']' << COLOR_ENDL;
#endif
    return (unsigned int)Atoi(strValue);
}
long AmigosDatabaseJson::GetValLong(const char *keyVal, long longDef)
{
    std::string strValue;

    USING_OBJ(dstJson);
    if (GetJsonValue(*dstJson, keyVal, strValue) == -1)
    {
        dstJson = NULL;
        return longDef;
    }
    dstJson = NULL;
#if DBG_PRINT
    AMILOG_INFO << keyVal << "=" << '['  << strValue << ']' << COLOR_ENDL;
#endif
    return Atoi(strValue);
}
unsigned long AmigosDatabaseJson::GetValUlong(const char *keyVal, unsigned long ulongDef)
{
    std::string strValue;

    USING_OBJ(dstJson);
    if (GetJsonValue(*dstJson, keyVal, strValue) == -1)
    {
        dstJson = NULL;
        return ulongDef;
    }
    dstJson = NULL;
#if DBG_PRINT
    AMILOG_INFO << keyVal << "=" << '['  << strValue << ']' << COLOR_ENDL;
#endif
    return Atoi(strValue);
}
std::string AmigosDatabaseJson::GetValStr(const char *keyVal, const char *strDef)
{
    std::string strValue;

    USING_OBJ(dstJson);
    if (GetJsonValue(*dstJson, keyVal, strValue) == -1)
    {
        dstJson = NULL;
        return strDef;
    }
    dstJson = NULL;
#if DBG_PRINT
    AMILOG_INFO << keyVal << "=" << '['  << strValue << ']' << COLOR_ENDL;
#endif
    return strValue;
}
float AmigosDatabaseJson::GetValFloat(const char *keyVal, float floatDef)
{
    std::string strValue;
    float fValue;

    USING_OBJ(dstJson);
    if (GetJsonValue(*dstJson, keyVal, strValue) == -1)
    {
        dstJson = NULL;
        return floatDef;
    }
    dstJson = NULL;
#if DBG_PRINT
    AMILOG_INFO << keyVal << "=" << '['  << strValue << ']' << COLOR_ENDL;
#endif
    std::istringstream(strValue) >> fValue;
    return fValue;
}
int AmigosDatabaseJson::SetVal(const char *key, const char *value)
{
    USING_OBJ(dstJson);
    (*dstJson)[key] = value;
    dstJson = NULL;
    return 0;
}
int AmigosDatabaseJson::ProcessKey(const char *key)
{
    nlohmann::json *targetJson = GetJsonObj(key);
    if (!targetJson)
    {
        dstJson = NULL;
        AMILOG_ERR << "SEC:" << GetSection() << " Can't find Json object, key=" << key << "." << COLOR_ENDL;
        return -1;
    }
    dstJson = targetJson;
    return 0;
}
int AmigosDatabaseJson::ProcessIn(unsigned int uintId)
{
    std::stringstream ss;
    ss << "IN_" << uintId;
    nlohmann::json *targetInJson = GetJsonObj(ss.str());
    if (!targetInJson)
    {
        dstJson = NULL;
        AMILOG_ERR << "SEC:" << GetSection() << " Can't find Json input object." << COLOR_ENDL;
        return -1;
    }
    dstJson = targetInJson;
    return 0;
}
int AmigosDatabaseJson::ProcessOut(unsigned int uintId)
{
    std::stringstream ss;
    ss << "OUT_" << uintId;
    nlohmann::json *targetOutJson = GetJsonObj(ss.str());
    if (!targetOutJson)
    {
        dstJson = NULL;
        AMILOG_ERR << "SEC:" << GetSection() << " Can't find Json input object." << COLOR_ENDL;
        return -1;
    }
    dstJson = targetOutJson;
    return 0;
}
int AmigosDatabaseJson::ConstructKey(const char *key)
{
    USING_OBJ(dstJson);
    dstJson = &(*dstJson)[key];
    return 0;
}
int AmigosDatabaseJson::ConstructIn(unsigned int uintId)
{
    std::stringstream ss;
    ss << "IN_" << uintId;
    USING_OBJ(dstJson);
    dstJson = &(*dstJson)[ss.str()];
    return 0;
}
int AmigosDatabaseJson::ConstructOut(unsigned int uintId)
{
    std::stringstream ss;
    ss << "OUT_" << uintId;
    USING_OBJ(dstJson);
    dstJson = &(*dstJson)[ss.str()];
    return 0;
}

