# this config is for spinand
# cis
# ipl + ipl_cust + uboot = boot [mtd0/mtd1]
# env [mtd2]
# ddrtrain [mtd3]
# kernel [mtd4/mtd5]
# ramdisk [mtd6/mtd7]
# earlyinit (optional) [mtd8/mtd9]
# bootconfig + rootfs + miservice + customer ——> ubia [mtd8] if no earlyinit; [mtd10] if earlyinit

PURELINUX_FASTBOOT_ENABLE:=y

# image info
ifeq ($(CONFIG_SENSOR_IPL_EARLYINIT_SUPPORT), y)
IMAGE_LIST			=	cis boot kernel ramdisk earlyinit ubia bootconfig rootfs miservice customer
else
IMAGE_LIST			=	cis boot kernel ramdisk ubia bootconfig rootfs miservice customer
endif

BOOT_IMAGE_LIST			=	ipl ipl_cust uboot
OTA_IMAGE_LIST			=	boot kernel bootconfig miservice customer

USR_MOUNT_BLOCKS		=	bootconfig miservice customer

# flash info
FLASH_TYPE			=	spinand
FLASH_BLK_SIZE			=	0x20000
FLASH_BLK_CNT			=	1024
FLASH_PG_SIZE			=	0x800
FLASH_SPARE_SIZE		=	64
#FLASH_PLANE_CNT		=	2
BLK_PB0_OFFSET			=	10
BLK_PB1_OFFSET			=	22
#BL0PBA				=	10
#BL1PBA				=	12
BLPINB				=	0
BAKCNT				=	3
BAKOFS				=	1
#FLASH_ECC_TYPE			=	ECC_TYPE_8BIT
#FLASH_ECC_TYPE			=	ECC_TYPE_16BIT
MTDPARTS			=	"mtdparts=nand0:$(cis$(MTDPART)),$(boot$(MTDPART)),$(cis$(SYSTAB))"

# bootcmd
BOOTCMD_ENV			=	$(ramdisk$(BOOTCMD)) $(kernel$(BOOTCMD))
BOOTCMD_LINUX_ONLY_ENV		=	setenv bootargs \$${bootargs_linux_only}\; $(ramdisk$(BOOTCMD)) $(kernel$(BOOTCMD))

# ext info
ENV_CFG				=	/dev/mtd2 0x0 $(call get_env_size) $(env$(PATSIZE))
ifeq ($(CONFIG_SENSOR_IPL_EARLYINIT_SUPPORT), y)
UBI_AT_MTD			=	10
else
UBI_AT_MTD			=	8
endif
ubia$(MTDPART)			=	-(ubia)
ECCGENERATOR			=	cis.bin boot.bin

# cis
cis$(RESOURCE)			=	$(IMAGEDIR)/cis.bin
cis$(PATSIZE)			=	$(call multiplyhex, $(FLASH_BLK_SIZE), 10)
cis$(BOOTTAB0)			=	$(cis$(MTDPART)),$(ipl$(MTDPART)),$(ipl_cust$(MTDPART)),$(uboot$(MTDPART))
cis$(BOOTTAB1)			=	$(ipl$(MTDPART)),$(ipl_cust$(MTDPART)),$(uboot$(MTDPART))
ifeq ($(CONFIG_SENSOR_IPL_EARLYINIT_SUPPORT), y)
cis$(SYSTAB)			=	$(env$(MTDPART)),$(ddrtrain$(MTDPART)),$(kernel$(MTDPART)),$(ramdisk$(MTDPART)),$(earlyinit$(MTDPART)),$(ubia$(MTDPART))
else
cis$(SYSTAB)			=	$(env$(MTDPART)),$(ddrtrain$(MTDPART)),$(kernel$(MTDPART)),$(ramdisk$(MTDPART)),$(ubia$(MTDPART))
endif
cis$(MTDPART)			=	$(cis$(PATSIZE))(CIS)

# ipl
ipl$(RESOURCE)			=	$(PROJ_ROOT)/board/$(CHIP)/boot/$(FLASH_TYPE)/ipl/$(IPL_CONFIG)
ipl$(DATASIZE)			=	$(FLASH_BLK_SIZE)
ipl$(COPIES)			=	3
ipl$(PATSIZE)			=	$(call multiplyhex, $(ipl$(COPIES)), $(ipl$(DATASIZE)))
ipl$(MTDPART)			=	$(ipl$(PATSIZE))(IPL)

# ipl_cust
ipl_cust$(RESOURCE)		=	$(PROJ_ROOT)/board/$(CHIP)/boot/$(FLASH_TYPE)/ipl/$(IPL_CUST_CONFIG)
ipl_cust$(DATASIZE)		=	$(FLASH_BLK_SIZE)
ipl_cust$(COPIES)		=	3
ipl_cust$(PATSIZE)		=	$(call multiplyhex, $(ipl_cust$(COPIES)), $(ipl_cust$(DATASIZE)))
ipl_cust$(MTDPART)		=	$(ipl_cust$(PATSIZE))(IPL_CUST)

# uboot
uboot$(RESOURCE)		=	$(PROJ_ROOT)/board/uboot/$(UBOOT_BIN)
uboot$(DATASIZE)		=	0x60000
uboot$(COPIES)			=	1
uboot$(PATSIZE)			=	$(call sum, $(uboot$(DATASIZE)) $(call multiplyhex, $(FLASH_BLK_SIZE), 4))
uboot$(MTDPART)			=	$(uboot$(PATSIZE))(UBOOT)

# boot
boot$(RESOURCE)			=	$(IMAGEDIR)/boot.bin
boot$(PATSIZE)			=	$(call sum, $(ipl$(PATSIZE)) $(ipl_cust$(PATSIZE)) $(uboot$(PATSIZE)))
boot$(MTDPART)			=	$(boot$(PATSIZE))(BOOT),$(boot$(PATSIZE))(BOOT_BAK)
boot$(OTABLK)			=	/dev/mtd0 /dev/mtd1

# env
env$(PATSIZE)			=	0x40000
env$(MTDPART)			=	$(env$(PATSIZE))(ENV)

# ddrtrain
ddrtrain$(PATSIZE)		=	0x60000
ddrtrain$(MTDPART)		=	$(ddrtrain$(PATSIZE))(DDRTRAIN)

# kernel
kernel$(RESOURCE)		=	$(PROJ_ROOT)/kbuild/$(KERNEL_VERSION)/arch/$(ARCH)/boot/$(KERNEL_BIN)
kernel$(DATASIZE)		=	0x500000
kernel$(PATSIZE)		=	$(kernel$(DATASIZE))
kernel$(PATNAME)		=	KERNEL KERNEL_BACKUP
kernel$(BOOTENV)		=	$(KERNEL_BOOT_ENV) loglevel=3
kernel$(MTDPART)		=	$(kernel$(PATSIZE))(KERNEL),$(kernel$(PATSIZE))(KERNEL_BACKUP)
kernel$(OTABLK)			=	/dev/mtd4 /dev/mtd5
kernel$(BOOTCMD)		=	loados nand by_header KERNEL by_header\;$(KERNEL_SIGN$(BOOTCMD))dcache off\;bootm \$${loados_addr}\;
kernel_only$(BOOTENV)		=	$(kernel$(BOOTENV))

# ramdisk$(PATSIZE) is compressed size, and ramdisk$(DATASIZE) is uncompressed size
ramdisk$(RESOURCE)		=	$(PROJ_ROOT)/release/chip/$(CHIP)/$(PRODUCT)/common/$(TOOLCHAIN)/$(TOOLCHAIN_VERSION)/release/bin/kernel/$(FLASH_TYPE)/ramdisk
ramdisk$(FSTYPE)		=	gz
ramdisk$(PATSIZE)		=	0x400000
ramdisk$(DATASIZE)		=	$$(printf "0x%x" $$(stat -c "%s" $(IMAGEDIR)/ramdisk.img))
ramdisk$(PATNAME)		=	RAMDISK RAMDISK_BACKUP
ramdisk$(MTDPART)		=	$(ramdisk$(PATSIZE))(RAMDISK),$(ramdisk$(PATSIZE))(RAMDISK_BACKUP)
ramdisk$(OPTIONS)		=	sz
ramdisk$(BOOTCMD)		=	loados nand by_header RAMDISK by_header\;$(RAMDISK_SIGN$(BOOTCMD))

ifeq ($(CONFIG_SENSOR_IPL_EARLYINIT_SUPPORT), y)
# earlyinit
earlyinit$(RESOURCE)	=	$(PROJ_ROOT)/board/rtos/earlyinit.bin
earlyinit$(PATNAME)		=	EIB EIB_BACKUP
earlyinit$(PATSIZE)		=	0x20000
earlyinit$(MTDPART)		=	$(earlyinit$(PATSIZE))(EIB),$(earlyinit$(PATSIZE))(EIB_BACKUP)
endif

# bootconfig
bootconfig$(RESOURCE)		=	$(OUTPUTDIR)/bootconfig
bootconfig$(FSTYPE)		=	ubifs
bootconfig$(UBIVOLID)		=	0
bootconfig$(PATSIZE)		=	0x400000
bootconfig$(MOUNTTG)		=	/bootconfig
bootconfig$(MOUNTPT)		=	ubi0:bootconfig
bootconfig$(OPTIONS)		=	ubia
bootconfig$(OTABLK)		=	/dev/ubi0_0

# rootfs
rootfs$(RESOURCE)		=	$(OUTPUTDIR)/rootfs
rootfs$(FSTYPE)			=	ubifs
rootfs$(UBIVOLID)		=	1
rootfs$(PATSIZE)		=	0x800000
rootfs$(BOOTENV)		=	ubi.mtd=ubia,$(shell printf %d $(FLASH_PG_SIZE)) root=/dev/ram rdinit=/linuxrc initrd=$(INITRAMFSLOADADDR),$(ramdisk$(DATASIZE)) rootwait
rootfs$(MOUNTTG)		=	/usr
rootfs$(MOUNTPT)		=	ubi0:rootfs
rootfs$(OPTIONS)		=	ubia
rootfs$(OTABLK)			=	/dev/ubi0_1

# miservice
miservice$(RESOURCE)		=	$(OUTPUTDIR)/miservice/config
miservice$(FSTYPE)		=	ubifs
miservice$(UBIVOLID)		=	2
ifneq ($(DEBUG), )
miservice$(PATSIZE)		=	0xC00000
else
miservice$(PATSIZE)		=	0xA00000
endif
miservice$(MOUNTTG)		=	/config
miservice$(MOUNTPT)		=	ubi0:miservice
miservice$(OPTIONS)		=	ubia
miservice$(OTABLK)		=	/dev/ubi0_2

# customer
customer$(RESOURCE)		=	$(OUTPUTDIR)/customer
customer$(FSTYPE)		=	ubifs
customer$(UBIVOLID)		=	3
customer$(PATSIZE)		=	0x2F00000
customer$(MOUNTTG)		=	/customer
customer$(MOUNTPT)		=	ubi0:customer
customer$(OPTIONS)		=	ubia
customer$(OTABLK)		=	/dev/ubi0_3
