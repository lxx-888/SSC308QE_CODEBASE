# this config is for nor
# ipl + cis + ipl_cust + uboot = boot [mtd0]
# env [mtd1]
# misc ——> fwfs [mtd2/mtd3]
# rtos [mtd4/mtd5]

# image info
IMAGE_LIST			=	boot misc rtos
BOOT_IMAGE_LIST			=	ipl cis ipl_cust uboot
OTA_IMAGE_LIST			=	boot rtos misc
USR_MOUNT_BLOCKS		=	misc

# flash info
FLASH_TYPE			=	nor
FLASH_BLK_SIZE			=	0x10000
FLASH_BLK_CNT			=	256
FLASH_PG_SIZE			=	0x1000

ifeq ($(UBOOT_VERSION), 201501)
MTDPARTS			=	"mtdparts=nor0:$(boot$(MTDPART)),$(cis$(SYSTAB))"
else
MTDPARTS			=	"nor0:$(boot$(MTDPART)),$(cis$(SYSTAB))"
endif

# bootcmd
BOOTCMD_ENV			=	$(misc$(BOOTCMD)) $(rtos$(BOOTCMD))

# ext info
ENV_CFG				=	/dev/mtd1 0x0 $(call get_env_size) $(env$(PATSIZE))

# cis
cis$(RESOURCE)			=	$(IMAGEDIR)/cis.bin
cis$(DATASIZE)			=	$(call max, $(call alignup, $(call filesize, $(cis$(RESOURCE))), $(FLASH_PG_SIZE)), 0xA000)
cis$(PATSIZE)			=	$(cis$(DATASIZE))
cis$(BOOTTAB0)			=	$(ipl$(MTDPART)),$(cis$(PATSIZE))(CIS),$(ipl_cust$(MTDPART)),$(uboot$(MTDPART)),$(env$(PATSIZE))@$(boot$(PATSIZE))(ENV)
cis$(SYSTAB)			=	$(misc$(MTDPART)),$(rtos$(MTDPART))

# ipl
ipl$(RESOURCE)			=	$(PROJ_ROOT)/board/$(CHIP)/boot/$(FLASH_TYPE)/ipl-rtos/$(IPL_CONFIG)
ipl$(DATASIZE)			=	0x10000
ipl$(PATSIZE)			=	0x10000
ipl$(MTDPART)			=	$(ipl$(PATSIZE))(IPL)

# ipl_cust
ipl_cust$(RESOURCE)		=	$(PROJ_ROOT)/board/$(CHIP)/boot/$(FLASH_TYPE)/ipl-rtos/$(IPL_CUST_CONFIG)
ipl_cust$(DATASIZE)		=	$(call max, 0xE000, $(call alignup, $(call filesize, $(ipl_cust$(RESOURCE))), $(FLASH_PG_SIZE)))
ipl_cust$(PATSIZE)		=	$(ipl_cust$(DATASIZE))
ipl_cust$(MTDPART)		=	$(ipl_cust$(PATSIZE))(IPL_CUST)

# uboot
uboot$(RESOURCE)		=	$(PROJ_ROOT)/board/uboot/$(UBOOT_BIN)
uboot$(DATASIZE)		=	$(call max, $(shell printf 0x%X $(shell expr $(shell printf %d 0x38000) - $(shell printf %d $(env$(PATSIZE))))), $(call alignup, $(call filesize, $(uboot$(RESOURCE))), $(FLASH_PG_SIZE)))
uboot$(PATSIZE)			=	$(uboot$(DATASIZE))
uboot$(MTDPART)			=	$(uboot$(PATSIZE))(UBOOT)

# boot
boot$(RESOURCE)			=	$(IMAGEDIR)/boot.bin
boot$(DATASIZE)			=	$(call sum, $(ipl$(PATSIZE)) $(ipl_cust$(PATSIZE)) $(uboot$(PATSIZE)) $(cis$(PATSIZE)) $(env$(PATSIZE)))
boot$(PATSIZE)			=	$(shell printf 0x%X $(shell expr $(shell printf %d $(call alignup, $(boot$(DATASIZE)), $(FLASH_BLK_SIZE))) - $(shell printf %d $(env$(PATSIZE)))))
boot$(MTDPART)			=	$(boot$(PATSIZE))(BOOT),$(env$(MTDPART))
boot$(OTABLK)			=	/dev/mtd0

# env
env$(PATSIZE)			=	$(FLASH_PG_SIZE)
env$(MTDPART)			=	$(env$(PATSIZE))(ENV)

# misc
misc$(RESOURCE)			=	$(OUTPUTDIR)/misc
misc$(FSTYPE)			=	fwfs
misc$(PATSIZE)			=	0x400000
misc$(PATNAME)			=	MISC_RTOS MISC_RTOS_BACKUP
misc$(MOUNTTG)			=	/misc
misc$(MOUNTPT)			=	/dev/mtd2 /dev/mtd3
misc$(MTDPART)			=	$(misc$(PATSIZE))(MISC_RTOS),$(misc$(PATSIZE))(MISC_RTOS_BACKUP)
misc$(OTABLK)			=	/dev/mtd2 /dev/mtd3
ifeq ($(misc$(OPTIONS)), sz)
misc$(BOOTCMD)			=	loados nor by_header MISC_RTOS by_header\;
else
misc$(BOOTCMD)			=	sf probe 0\;sf read $(RTOS_RAMDISK_LOAD_ADDR) MISC_RTOS $(RTOS_RAMDISK_MEM_SIZE)\;
endif

# rtos
rtos$(RESOURCE)			=	$(PROJ_ROOT)/board/rtos/$(RTOS_BIN)
rtos$(OPTIONS)			=   sz
rtos$(PATSIZE)			=	0x1C0000
rtos$(PATNAME)			=	RTOS RTOS_BACKUP
rtos$(BOOTENV)			=	$(RTOS_BOOT_ENV) mma_base=$(CONFIG_MMA_HEAP_ADDR) mma_size=$(CONFIG_MMA_HEAP_SIZE) rtosrd_addr=$(RTOS_RAMDISK_LOAD_ADDR) rtosrd_size=$(RTOS_RAMDISK_MEM_SIZE) rtosts_addr=$(RTOS_TIMESTAMP_RSVD_ADDR) rtosts_size=$(RTOS_TIMESTAMP_SIZE) rtos_master=$(RTOS_MASTER_HW_CORE) loglevel=3
rtos$(MTDPART)			=	$(rtos$(PATSIZE))(RTOS),$(rtos$(PATSIZE))(RTOS_BACKUP)
rtos$(BOOTCMD)			=	loados nor by_header RTOS by_header\;bootm \$${loados_addr}\;


