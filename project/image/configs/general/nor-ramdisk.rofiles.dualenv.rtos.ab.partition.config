# this config is for nor
# ipl + cis + ipl_cust + uboot = boot [mtd0]
# env [mtd1]
# kernel + ramdisk [mtd2]
# misc ——> fwfs [mtd3]
# rtos [mtd4]
# rootfs ——> squashfs [mtd5]
# miservice ——> squashfs [mtd6]
# customer ——> jffs2 [mtd7]

# image info
IMAGE_LIST			= boot kernel ramdisk misc rofiles rtos rootfs miservice customer
BOOT_IMAGE_LIST			=	ipl cis ipl_cust uboot
OTA_IMAGE_LIST			=	boot kernel misc rofiles miservice customer
USR_MOUNT_BLOCKS		=	misc rofiles miservice customer

# flash info
FLASH_TYPE			    =	nor
FLASH_BLK_SIZE			=	0x10000
FLASH_BLK_CNT			=	512
FLASH_PG_SIZE			=	0x1000
ifeq ($(UBOOT_VERSION), 201501)
MTDPARTS			=	"mtdparts=nor0:$(boot$(MTDPART)),$(cis$(SYSTAB))"
else
MTDPARTS			=	"nor0:$(boot$(MTDPART)),$(cis$(SYSTAB))"
endif

# bootcmd
BOOTCMD_ENV			=	$(rtos$(BOOTCMD)) $(ramdisk$(BOOTCMD)) $(kernel$(BOOTCMD))
# BOOTCMD_LINUX_ONLY_ENV = dcache on\; sf probe 0\; $(kernel$(BOOTCMD)) $(KERNEL_SIGN$(BOOTCMD)) bootm $(KERNELBOOTADDR)\;
BOOTCMD_LINUX_ONLY_ENV		=	setenv bootargs \$${bootargs_linux_only}\; $(ramdisk$(BOOTCMD)) $(kernel$(BOOTCMD))
#BOOTCMD_ENV			=	dcache on\; sf probe 0\; $(rtos$(BOOTCMD))

# ext info
ENV_TYPE			=	dualenv
ENV_CFG				=	/dev/mtd2 0x0 $(call get_env_size) $(env$(PATSIZE))
ENV1_CFG			=	/dev/mtd3 0x0 $(call get_env_size) $(env1$(PATSIZE))

# cis
cis$(RESOURCE)			=	$(IMAGEDIR)/cis.bin
cis$(DATASIZE)			=	$(call max, $(call alignup, $(call filesize, $(cis$(RESOURCE))), $(FLASH_PG_SIZE)), 0xA000)
cis$(PATSIZE)			=	$(cis$(DATASIZE))
cis$(BOOTTAB0)			=	$(ipl$(MTDPART)),$(cis$(PATSIZE))(CIS),$(ipl_cust$(MTDPART)),$(uboot$(MTDPART))
cis$(BOOTTAB1)			=	$(ipl$(PATSIZE))@$(boot$(PATSIZE))(IPL),$(cis$(PATSIZE))(CIS),$(ipl_cust$(MTDPART)),$(uboot$(MTDPART))
cis$(SYSTAB)			=	$(env$(PATSIZE))@$(call multiplyhex, 2, $(boot$(PATSIZE)))(ENV),$(env1$(MTDPART)),$(kernel$(MTDPART)),$(rootfs$(MTDPART)),$(misc$(MTDPART)),$(rofiles$(MTDPART)),$(rtos$(MTDPART)),$(ramdisk$(MTDPART)),$(miservice$(MTDPART)),$(customer$(MTDPART))
cis$(MTDPART)			=	$(cis$(PATSIZE))(CIS)

# ipl
ipl$(RESOURCE)			=	$(PROJ_ROOT)/board/$(CHIP)/boot/$(FLASH_TYPE)/ipl-dualos/$(IPL_CONFIG)
ipl$(DATASIZE)			=	$(call alignup, $(call filesize, $(ipl$(RESOURCE))), $(FLASH_PG_SIZE))
ipl$(COPIES)			= 1
ipl$(PATSIZE)			=	$(call multiplyhex, $(ipl$(COPIES)), $(ipl$(DATASIZE)))
ipl$(MTDPART)			=	$(ipl$(PATSIZE))(IPL)

# ipl_cust
ipl_cust$(RESOURCE)		=	$(PROJ_ROOT)/board/$(CHIP)/boot/$(FLASH_TYPE)/ipl-dualos/$(IPL_CUST_CONFIG)
ipl_cust$(DATASIZE)		=	$(call alignup, $(call filesize, $(ipl_cust$(RESOURCE))), $(FLASH_PG_SIZE))
ipl_cust$(COPIES)			= 1
ipl_cust$(PATSIZE)		=	$(call multiplyhex, $(ipl_cust$(COPIES)), $(ipl_cust$(DATASIZE)))
ipl_cust$(MTDPART)		=	$(ipl_cust$(PATSIZE))(IPL_CUST)

# uboot
uboot$(RESOURCE)		=	$(PROJ_ROOT)/board/uboot/$(UBOOT_BIN)
uboot$(DATASIZE)		=	$(call alignup, $(call filesize, $(uboot$(RESOURCE))), $(FLASH_PG_SIZE))
uboot$(PATSIZE)			=	$(uboot$(DATASIZE))
uboot$(MTDPART)			=	$(uboot$(PATSIZE))(UBOOT)

# boot
boot$(RESOURCE)			=	$(IMAGEDIR)/boot.bin
boot$(DATASIZE)			=	$(call sum, $(ipl$(PATSIZE)) $(ipl_cust$(PATSIZE)) $(uboot$(PATSIZE)) $(cis$(PATSIZE)))
boot$(PATSIZE)			=	$(shell printf 0x%X $(shell expr $(shell printf %d $(call alignup, $(boot$(DATASIZE)), $(FLASH_BLK_SIZE)))))
boot$(MTDPART)			=	$(boot$(PATSIZE))(BOOT),$(boot$(PATSIZE))(BOOT_BAK)
boot$(OTABLK)			=	/dev/mtd0 /dev/mtd1

# env
env$(PATSIZE)			=	$(FLASH_BLK_SIZE)
env$(MTDPART)			=	$(env$(PATSIZE))(ENV)

# env1
env1$(PATSIZE)			=	$(FLASH_BLK_SIZE)
env1$(MTDPART)			=	$(env1$(PATSIZE))(ENV1)

# kernel
kernel$(RESOURCE)		=	$(PROJ_ROOT)/kbuild/$(KERNEL_VERSION)/arch/$(ARCH)/boot/$(KERNEL_BIN)
kernel$(DATASIZE)		=	0x230000
kernel$(PATSIZE)		=	$(kernel$(DATASIZE))
kernel$(PATNAME)		=	KERNEL KERNEL_BACKUP
kernel$(MTDPART)		=	$(kernel$(PATSIZE))(KERNEL),$(kernel$(PATSIZE))(KERNEL_BACKUP)
#kernel$(MTDPART)		=	$(kernel$(PATSIZE))(KERNEL)
kernel$(OTABLK)			=	/dev/mtd4 /dev/mtd5
kernel$(BOOTENV)		=	$(KERNEL_BOOT_ENV) os_adaptor=mma_base=$(CONFIG_MMA_HEAP_ADDR),mma_size=$(CONFIG_MMA_HEAP_SIZE) loglevel=3 maxcpus=1
ifeq ($(DUAL_OS_TYPE), HYP)
kernel$(BOOTCMD)		=	loados nor by_header KERNEL by_header\;$(KERNEL_SIGN$(BOOTCMD))bootm start \$${loados_addr}\;bootm loados\;bootm prep\;
else
kernel$(BOOTCMD)		=	loados nor by_header KERNEL by_header\;$(KERNEL_SIGN$(BOOTCMD))dcache off\;bootm \$${loados_addr}\;
endif
ifneq ($(KERNEL_ONLY_BOOT_ENV),)
kernel_only$(BOOTENV)		=	$(KERNEL_ONLY_BOOT_ENV) disable_rtos=1 loglevel=3
else
kernel_only$(BOOTENV)		=	$(kernel$(BOOTENV)) disable_rtos=1 loglevel=3
endif

# ramdisk
ifneq ($(DEBUG), )
ramdisk$(RESOURCE)		=	$(PROJ_ROOT)/release/chip/$(CHIP)/$(PRODUCT)/common/$(TOOLCHAIN)/$(TOOLCHAIN_VERSION)/debug/bin/kernel/$(FLASH_TYPE)/ramdisk
else
ramdisk$(RESOURCE)		=	$(PROJ_ROOT)/release/chip/$(CHIP)/$(PRODUCT)/common/$(TOOLCHAIN)/$(TOOLCHAIN_VERSION)/release/bin/kernel/$(FLASH_TYPE)/ramdisk
endif
ramdisk$(FSTYPE)		=	gz
ramdisk$(PATSIZE)		=	0x60000
ramdisk$(PATNAME)		=	RAMDISK RAMDISK_BACKUP
ramdisk$(MTDPART)		=	$(ramdisk$(PATSIZE))(RAMDISK),$(ramdisk$(PATSIZE))(RAMDISK_BACKUP)
#ramdisk$(MTDPART)		=	$(ramdisk$(PATSIZE))(RAMDISK)
ramdisk$(OPTIONS)		=	sz
ramdisk$(BOOTCMD)		=	loados nor by_header RAMDISK by_header\;$(RAMDISK_SIGN$(BOOTCMD))


# misc
misc$(RESOURCE)			=	$(OUTPUTDIR)/misc
misc$(FSTYPE)			=	fwfs
misc$(PATSIZE)			=	0xA0000
misc$(PATNAME)			=	MISC
misc$(MOUNTTG)			=	/misc
misc$(MOUNTPT)			=	/dev/mtd7
misc$(MTDPART)			=	$(misc$(PATSIZE))(MISC)
misc$(OTABLK)			=	/dev/mtd7

# rofiles
rofiles$(RESOURCE)			=	$(OUTPUTDIR)/rofiles
rofiles$(FSTYPE)			=	lwfs
rofiles$(PATSIZE)			=	0x200000
rofiles$(PATNAME)			=	RO_FILES
rofiles$(MOUNTTG)			=	/rofiles
rofiles$(MOUNTPT)			=	/dev/mtdblock8
rofiles$(MTDPART)			=	$(rofiles$(PATSIZE))(RO_FILES)
rofiles$(OTABLK)			=	/dev/mtd8

# rtos
rtos$(RESOURCE)			=	$(PROJ_ROOT)/board/rtos/$(RTOS_BIN)
rtos$(OPTIONS)			=   sz
rtos$(PATSIZE)			=	0x1D0000
rtos$(PATNAME)			=	RTOS RTOS_BACKUP
rtos$(BOOTENV)			=	$(RTOS_BOOT_ENV) mma_base=$(CONFIG_MMA_HEAP_ADDR) mma_size=$(CONFIG_MMA_HEAP_SIZE) rtosrd_addr=$(RTOS_RAMDISK_LOAD_ADDR) rtosrd_size=$(RTOS_RAMDISK_MEM_SIZE) rtosts_addr=$(RTOS_TIMESTAMP_RSVD_ADDR) rtosts_size=$(RTOS_TIMESTAMP_SIZE) rtos_master=$(RTOS_MASTER_HW_CORE) loglevel=3
rtos$(MTDPART)			=	$(rtos$(PATSIZE))(RTOS),$(rtos$(PATSIZE))(RTOS_BACKUP)
rtos$(BOOTCMD)			=	loados nor by_header RTOS by_header\;$(RTOS_SIGN$(BOOTCMD))bootm start \$${loados_addr}\;bootm loados\;bootm prep\;cpu 1 release ${RTOS_LOAD_ADDR} s\;cpuwait\;

# rootfs
rootfs$(RESOURCE)		=	$(OUTPUTDIR)/rootfs
rootfs$(FSTYPE)			=	squashfs
rootfs$(PATSIZE)		=	0x200000
rootfs$(MOUNTTG)		=	/usr
rootfs$(MOUNTPT)		=	/dev/mtdblock6
rootfs$(OPTIONS)		=	xz
rootfs$(MTDPART)		=	$(rootfs$(PATSIZE))(rootfs)
rootfs$(OTABLK)			=	/dev/mtd6
rootfs$(BOOTENV)		=	root=/dev/ram rdinit=/linuxrc initrd=$(INITRAMFSLOADADDR),$(ramdisk$(PATSIZE)) rootwait

# miservice
miservice$(RESOURCE)	=	$(OUTPUTDIR)/miservice/config
miservice$(FSTYPE)		=	squashfs
miservice$(PATSIZE)		=	0x1d0000
miservice$(MOUNTTG)		=	/config
miservice$(MOUNTPT)		=	/dev/mtdblock13
miservice$(OTABLK)		=	/dev/mtd13
miservice$(OPTIONS)		=	xz
miservice$(MTDPART)		=	$(miservice$(PATSIZE))(miservice)

# customer
customer$(RESOURCE)		=	$(OUTPUTDIR)/customer
customer$(FSTYPE)		=	jffs2
customer$(PATSIZE)		=	0x4D0000
customer$(MOUNTTG)		=	/customer
customer$(MOUNTPT)		=	/dev/mtdblock14
customer$(OTABLK)		=	/dev/mtd14
customer$(OPTIONS)		=	xz
customer$(MTDPART)		=	$(customer$(PATSIZE))(customer)
