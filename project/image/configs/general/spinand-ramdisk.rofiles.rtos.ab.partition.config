# this config is for spinand
# cis
# ipl + ipl_cust + uboot = boot [mtd0/mtd1]
# env [mtd2]
# kernel + ramdisk [mtd3/mtd4]
# misc ——> fwfs [mtd5]
# rtos [mtd6/mtd7]
# bootconfig + rootfs + miservice + customer ——> ubia [mtd8]

# image info
ifeq ($(CONFIG_SENSOR_IPL_EARLYINIT_SUPPORT), y)
IMAGE_LIST			=	cis boot kernel ramdisk misc rofiles rtos earlyinit ubia bootconfig rootfs miservice customer
else
IMAGE_LIST			=	cis boot kernel ramdisk misc rofiles rtos ubia bootconfig rootfs miservice customer
endif

ifeq ($(DUAL_OS_TYPE), HYP)
BOOT_IMAGE_LIST			=	ipl ipl_cust optee vmm uboot
else
BOOT_IMAGE_LIST			=	ipl ipl_cust uboot
endif
OTA_IMAGE_LIST			=	boot kernel misc bootconfig miservice customer

USR_MOUNT_BLOCKS		=	misc rofiles bootconfig miservice customer

# flash info
FLASH_TYPE			=	spinand
FLASH_BLK_SIZE			=	0x20000
FLASH_BLK_CNT			=	1024
FLASH_PG_SIZE			=	0x800
FLASH_SPARE_SIZE		=	64
#FLASH_PLANE_CNT		=	2
BLK_PB0_OFFSET			=	10
BLK_PB1_OFFSET			=	22
#BL0PBA				=	10
#BL1PBA				=	12
BLPINB				=	0
BAKCNT				=	3
BAKOFS				=	1
#FLASH_ECC_TYPE			=	ECC_TYPE_8BIT
#FLASH_ECC_TYPE			=	ECC_TYPE_16BIT
MTDPARTS			=	"mtdparts=nand0:$(cis$(MTDPART)),$(boot$(MTDPART)),$(cis$(SYSTAB))"

# bootcmd
ifeq ($(DUAL_OS_TYPE), HYP)
BOOTCMD_ENV			=	$(rtos$(BOOTCMD)) bootab\; $(vmm$(BOOTCMD))
BOOTCMD_LINUX_ONLY_ENV		=	setenv bootargs \$${bootargs_linux_only}\; setenv bootargs_hyp \$${bootargs_hyp} vm0_en=0\; $(ramdisk$(BOOTCMD)) $(kernel$(BOOTCMD)) $(vmm$(BOOTCMD))
else
BOOTCMD_ENV			=	$(rtos$(BOOTCMD)) bootab\;
BOOTCMD_LINUX_ONLY_ENV		= setenv bootargs \$${bootargs_linux_only}\; bootab\;
BOOTCMD_ENV_A			=	$(ramdisk_a$(BOOTCMD)) $(kernel_a$(BOOTCMD))
BOOTCMD_ENV_B			= 	$(ramdisk_b$(BOOTCMD)) $(kernel_b$(BOOTCMD))
endif

# ext info
ENV_TYPE			=	dualenv
ENV_CFG				=	/dev/mtd2 0x0 $(call get_env_size) $(env$(PATSIZE))
ENV1_CFG			=	/dev/mtd3 0x0 $(call get_env_size) $(env1$(PATSIZE))
ifeq ($(CONFIG_SENSOR_IPL_EARLYINIT_SUPPORT), y)
UBI_AT_MTD			=	14
else
UBI_AT_MTD			=	12
endif
ubia$(MTDPART)			=	-(ubia)
ECCGENERATOR			=	cis.bin boot.bin

# cis
cis$(RESOURCE)			=	$(IMAGEDIR)/cis.bin
cis$(PATSIZE)			=	$(call multiplyhex, $(FLASH_BLK_SIZE), 10)
ifeq ($(DUAL_OS_TYPE), HYP)
cis$(BOOTTAB0)			=	$(cis$(MTDPART)),$(ipl$(MTDPART)),$(ipl_cust$(MTDPART)),$(optee$(PATSIZE))(OPTEE),$(vmm$(PATSIZE))(VMM),$(uboot$(MTDPART))
cis$(BOOTTAB1)			=	$(ipl$(MTDPART)),$(ipl_cust$(MTDPART)),$(optee$(PATSIZE))(OPTEE),$(vmm$(PATSIZE))(VMM),$(uboot$(MTDPART))
else
cis$(BOOTTAB0)			=	$(cis$(MTDPART)),$(ipl$(MTDPART)),$(ipl_cust$(MTDPART)),$(uboot$(MTDPART))
cis$(BOOTTAB1)			=	$(ipl$(MTDPART)),$(ipl_cust$(MTDPART)),$(uboot$(MTDPART))
endif
ifeq ($(CONFIG_SENSOR_IPL_EARLYINIT_SUPPORT), y)
cis$(SYSTAB)			=	$(env$(MTDPART)),$(env1$(MTDPART)),$(kernel$(MTDPART)),$(misc$(MTDPART)),$(rofiles$(MTDPART)),$(rtos$(MTDPART)),$(ramdisk$(MTDPART)),$(earlyinit$(MTDPART)),$(ubia$(MTDPART))
else
cis$(SYSTAB)			=	$(env$(MTDPART)),$(env1$(MTDPART)),$(kernel$(MTDPART)),$(misc$(MTDPART)),$(rofiles$(MTDPART)),$(rtos$(MTDPART)),$(ramdisk$(MTDPART)),$(ubia$(MTDPART))
endif
cis$(MTDPART)			=	$(cis$(PATSIZE))(CIS)

# ipl
ipl$(RESOURCE)			=	$(PROJ_ROOT)/board/$(CHIP)/boot/$(FLASH_TYPE)/ipl-dualos/$(IPL_CONFIG)
ipl$(DATASIZE)			=	$(FLASH_BLK_SIZE)
ipl$(COPIES)			=	3
ipl$(PATSIZE)			=	$(call multiplyhex, $(ipl$(COPIES)), $(ipl$(DATASIZE)))
ipl$(MTDPART)			=	$(ipl$(PATSIZE))(IPL)

# ipl_cust
ipl_cust$(RESOURCE)		=	$(PROJ_ROOT)/board/$(CHIP)/boot/$(FLASH_TYPE)/ipl-dualos/$(IPL_CUST_CONFIG)
ipl_cust$(DATASIZE)		=	$(FLASH_BLK_SIZE)
ipl_cust$(COPIES)		=	3
ipl_cust$(PATSIZE)		=	$(call multiplyhex, $(ipl_cust$(COPIES)), $(ipl_cust$(DATASIZE)))
ipl_cust$(MTDPART)		=	$(ipl_cust$(PATSIZE))(IPL_CUST)

# OPTEE
optee$(RESOURCE)		=	$(PROJ_ROOT)/board/$(CHIP)/boot/optee/$(OPTEE_CONFIG)
optee$(DATASIZE)		=	$(call alignup, $(call filesize, $(optee$(RESOURCE))), $(FLASH_BLK_SIZE))
optee$(PATSIZE)			=	$(optee$(DATASIZE))
optee$(MTDPART)			=	$(optee$(PATSIZE))(OPTEE)

ifeq ($(DUAL_OS_TYPE), HYP)
# VMM
vmm$(RESOURCE)			=	$(PROJ_ROOT)/board/$(CHIP)/boot/vmm/$(VMM_CONFIG)
vmm$(DATASIZE)			=	$(call alignup, $(call filesize, $(vmm$(RESOURCE))), $(FLASH_BLK_SIZE))
vmm$(PATSIZE)			=	$(vmm$(DATASIZE))
vmm$(MTDPART)			=	$(vmm$(PATSIZE))(VMM)
vmm$(BOOTENV)			=	vmm_size=$(VMM_MEM_SIZE) vmm_limit_size=$(VMM_LIMIT_MEM_SIZE) vm0_en=1 vm1_en=1 vm0_online_map=0x02 vm1_online_map=0x03 vm0_master=$(RTOS_MASTER_HW_CORE) vm1_master=0 vm0_entry=$(RTOS_LOAD_ADDR)
VMM_PART_OFFSET			:=	$(shell grep VMM $(IMAGEDIR)/partition_layout.txt | sed -n 4,4p | cut -b 12-21)
vmm$(BOOTCMD)			=	mtdparts add nand0 $(vmm$(PATSIZE))@$(VMM_PART_OFFSET) VMM\; loados nand by_header VMM by_header\;$(VMM_SIGN$(BOOTCMD))dcache off\;bootm \$${loados_addr}\;
endif

# uboot
uboot$(RESOURCE)		=	$(PROJ_ROOT)/board/uboot/$(UBOOT_BIN)
uboot$(DATASIZE)		=	0x60000
uboot$(COPIES)			=	1
uboot$(PATSIZE)			=	$(call sum, $(uboot$(DATASIZE)) $(call multiplyhex, $(FLASH_BLK_SIZE), 4))
uboot$(MTDPART)			=	$(uboot$(PATSIZE))(UBOOT)

# boot
boot$(RESOURCE)			=	$(IMAGEDIR)/boot.bin
ifeq ($(DUAL_OS_TYPE), HYP)
boot$(PATSIZE)			=	$(call sum, $(ipl$(PATSIZE)) $(ipl_cust$(PATSIZE)) $(optee$(PATSIZE)) $(vmm$(PATSIZE)) $(uboot$(PATSIZE)))
else
boot$(PATSIZE)			=	$(call sum, $(ipl$(PATSIZE)) $(ipl_cust$(PATSIZE)) $(uboot$(PATSIZE)))
endif
boot$(MTDPART)			=	$(boot$(PATSIZE))(BOOT),$(boot$(PATSIZE))(BOOT_BAK)
boot$(OTABLK)			=	/dev/mtd0 /dev/mtd1

# env
env$(PATSIZE)			=	0x40000
env$(MTDPART)			=	$(env$(PATSIZE))(ENV)

# env1
env1$(PATSIZE)			=	0x40000
env1$(MTDPART)			=	$(env1$(PATSIZE))(ENV1)

# kernel
kernel$(RESOURCE)		=	$(PROJ_ROOT)/kbuild/$(KERNEL_VERSION)/arch/$(ARCH)/boot/$(KERNEL_BIN)
kernel$(DATASIZE)		=	0x500000
kernel$(PATSIZE)		=	$(kernel$(DATASIZE))
kernel$(PATNAME)		=	KERNEL KERNEL_BACKUP
kernel$(BOOTENV)		=	$(KERNEL_BOOT_ENV) os_adaptor=mma_base=$(CONFIG_MMA_HEAP_ADDR),mma_size=$(CONFIG_MMA_HEAP_SIZE) loglevel=3 maxcpus=1
kernel$(MTDPART)		=	$(kernel$(PATSIZE))(KERNEL),$(kernel$(PATSIZE))(KERNEL_BACKUP)
kernel$(OTABLK)			=	/dev/mtd4 /dev/mtd5
ifeq ($(DUAL_OS_TYPE), HYP)
kernel$(BOOTCMD)		=	loados nand by_header KERNEL by_header\;$(KERNEL_SIGN$(BOOTCMD))bootm start \$${loados_addr}\;bootm loados\;bootm prep\;
else
kernel_a$(BOOTCMD)		=	loados nand by_header KERNEL by_header\;$(KERNEL_SIGN$(BOOTCMD))dcache off\;bootm \$${loados_addr}\;
kernel_b$(BOOTCMD)		=	loados nand by_header KERNEL_BACKUP by_header\;$(KERNEL_SIGN$(BOOTCMD))dcache off\;bootm \$${loados_addr}\;
endif
ifneq ($(KERNEL_ONLY_BOOT_ENV),)
kernel_only$(BOOTENV)		=	$(KERNEL_ONLY_BOOT_ENV) disable_rtos=1 loglevel=3
else
kernel_only$(BOOTENV)		=	$(kernel$(BOOTENV)) disable_rtos=1 loglevel=3
endif

# ramdisk
ifneq ($(DEBUG), )
ramdisk$(RESOURCE)		=	$(PROJ_ROOT)/release/chip/$(CHIP)/$(PRODUCT)/common/$(TOOLCHAIN)/$(TOOLCHAIN_VERSION)/debug/bin/kernel/$(FLASH_TYPE)/ramdisk
else
ramdisk$(RESOURCE)		=	$(PROJ_ROOT)/release/chip/$(CHIP)/$(PRODUCT)/common/$(TOOLCHAIN)/$(TOOLCHAIN_VERSION)/release/bin/kernel/$(FLASH_TYPE)/ramdisk
endif
ramdisk$(FSTYPE)		=	gz
ramdisk$(PATSIZE)		=	0x100000
ramdisk$(PATNAME)		=	RAMDISK RAMDISK_BACKUP
ramdisk$(MTDPART)		=	$(ramdisk$(PATSIZE))(RAMDISK),$(ramdisk$(PATSIZE))(RAMDISK_BACKUP)
ramdisk$(OPTIONS)		=	sz
ramdisk_a$(BOOTCMD)		=	loados nand by_header RAMDISK by_header\;$(RAMDISK_SIGN$(BOOTCMD))
ramdisk_b$(BOOTCMD)		=	loados nand by_header RAMDISK_BACKUP by_header\;$(RAMDISK_SIGN$(BOOTCMD))

# misc
misc$(RESOURCE)			=	$(OUTPUTDIR)/misc
misc$(FSTYPE)			=	fwfs
misc$(PATSIZE)			=	0x700000
misc$(PATNAME)			=	MISC
misc$(MOUNTTG)			=	/misc
misc$(MOUNTPT)			=	/dev/mtd6
misc$(MTDPART)			=	$(misc$(PATSIZE))(MISC)
misc$(OTABLK)			=	/dev/mtd6

# rofiles
rofiles$(RESOURCE)			=	$(OUTPUTDIR)/rofiles
rofiles$(FSTYPE)			=	lwfs
rofiles$(PATSIZE)			=	0x700000
rofiles$(PATNAME)			=	RO_FILES
rofiles$(MOUNTTG)			=	/rofiles
rofiles$(MOUNTPT)			=	/dev/mtdblock7
rofiles$(MTDPART)			=	$(rofiles$(PATSIZE))(RO_FILES)
rofiles$(OTABLK)			=	/dev/mtd7

# rtos
rtos$(RESOURCE)			=	$(PROJ_ROOT)/board/rtos/$(RTOS_BIN)
rtos$(PATSIZE)			=	0x500000
rtos$(PATNAME)			=	RTOS RTOS_BACKUP
rtos$(BOOTENV)			=	$(RTOS_BOOT_ENV) mma_base=$(CONFIG_MMA_HEAP_ADDR) mma_size=$(CONFIG_MMA_HEAP_SIZE) rtosrd_addr=$(RTOS_RAMDISK_LOAD_ADDR) rtosrd_size=$(RTOS_RAMDISK_MEM_SIZE) rtosts_addr=$(RTOS_TIMESTAMP_RSVD_ADDR) rtosts_size=$(RTOS_TIMESTAMP_SIZE) rtos_master=$(RTOS_MASTER_HW_CORE) loglevel=3
rtos$(MTDPART)			=	$(rtos$(PATSIZE))(RTOS),$(rtos$(PATSIZE))(RTOS_BACKUP)
ifeq ($(DUAL_OS_TYPE), HYP)
rtos$(BOOTCMD)			=	loados nand by_header RTOS by_header\;$(RTOS_SIGN$(BOOTCMD))bootm start \$${loados_addr}\;bootm loados\;bootm prep\;
else
rtos$(BOOTCMD)			=	loados nand by_header RTOS by_header\;$(RTOS_SIGN$(BOOTCMD))bootm start \$${loados_addr}\;bootm loados\;bootm prep\;cpu 1 release ${RTOS_LOAD_ADDR} s\;cpuwait\;
endif

ifeq ($(CONFIG_SENSOR_IPL_EARLYINIT_SUPPORT), y)
# earlyinit
earlyinit$(RESOURCE)		=	$(PROJ_ROOT)/board/rtos/earlyinit.bin
earlyinit$(PATNAME)		=	EIB EIB_BACKUP
earlyinit$(PATSIZE)		=	0x20000
earlyinit$(MTDPART)		=	$(earlyinit$(PATSIZE))(EIB),$(earlyinit$(PATSIZE))(EIB_BACKUP)
endif

# bootconfig
bootconfig$(RESOURCE)		=	$(OUTPUTDIR)/bootconfig
bootconfig$(FSTYPE)		=	ubifs
bootconfig$(UBIVOLID)		=	0
bootconfig$(PATSIZE)		=	0x400000
bootconfig$(MOUNTTG)		=	/bootconfig
bootconfig$(MOUNTPT)		=	ubi0:bootconfig
bootconfig$(OPTIONS)		=	ubia
bootconfig$(OTABLK)		=	/dev/ubi0_0

# rootfs
rootfs$(RESOURCE)		=	$(OUTPUTDIR)/rootfs
rootfs$(FSTYPE)			=	ubifs
rootfs$(UBIVOLID)		=	1
rootfs$(PATSIZE)		=	0x800000
rootfs$(BOOTENV)		=	ubi.mtd=ubia,$(shell printf %d $(FLASH_PG_SIZE)) root=/dev/ram rdinit=/linuxrc initrd=$(INITRAMFSLOADADDR),$(ramdisk$(PATSIZE)) rootwait
rootfs$(MOUNTTG)		=	/usr
rootfs$(MOUNTPT)		=	ubi0:rootfs
rootfs$(OPTIONS)		=	ubia
rootfs$(OTABLK)			=	/dev/ubi0_1

# miservice
miservice$(RESOURCE)		=	$(OUTPUTDIR)/miservice/config
miservice$(FSTYPE)		=	ubifs
miservice$(UBIVOLID)		=	2
ifneq ($(DEBUG), )
miservice$(PATSIZE)		=	0xC00000
else
miservice$(PATSIZE)		=	0xA00000
endif
miservice$(MOUNTTG)		=	/config
miservice$(MOUNTPT)		=	ubi0:miservice
miservice$(OPTIONS)		=	ubia
miservice$(OTABLK)		=	/dev/ubi0_2

# customer
customer$(RESOURCE)		=	$(OUTPUTDIR)/customer
customer$(FSTYPE)		=	ubifs
customer$(UBIVOLID)		=	3
customer$(PATSIZE)		=	0x3A00000
customer$(MOUNTTG)		=	/customer
customer$(MOUNTPT)		=	ubi0:customer
customer$(OPTIONS)		=	ubia
customer$(OTABLK)		=	/dev/ubi0_3
