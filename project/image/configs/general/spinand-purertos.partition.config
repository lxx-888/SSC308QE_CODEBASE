# this config is for spinand
# cis
# ipl + ipl_cust + uboot = boot [mtd0/mtd1]
# env [mtd2]
# misc ——> fwfs [mtd5]
# rtos [mtd6/mtd7]
# bootconfig + rootfs + miservice + customer ——> ubia [mtd8]

# image info
IMAGE_LIST			=	cis boot misc rtos
BOOT_IMAGE_LIST			=	ipl ipl_cust uboot
OTA_IMAGE_LIST			=	boot misc
USR_MOUNT_BLOCKS		=	misc

# flash info
FLASH_TYPE			=	spinand
FLASH_BLK_SIZE			=	0x20000
FLASH_BLK_CNT			=	1024
FLASH_PG_SIZE			=	0x800
FLASH_SPARE_SIZE		=	64
#FLASH_PLANE_CNT		=	2
BLK_PB0_OFFSET			=	10
BLK_PB1_OFFSET			=	22
#BL0PBA				=	10
#BL1PBA				=	12
BLPINB				=	0
BAKCNT				=	3
BAKOFS				=	1
#FLASH_ECC_TYPE			=	ECC_TYPE_8BIT
#FLASH_ECC_TYPE			=	ECC_TYPE_16BIT
MTDPARTS			=	"mtdparts=nand0:$(cis$(MTDPART)),$(boot$(MTDPART)),$(cis$(SYSTAB))"

# bootcmd
BOOTCMD_ENV			=	$(misc$(BOOTCMD)) $(rtos$(BOOTCMD))

# ext info
ENV_CFG				=	/dev/mtd2 0x0 $(call get_env_size) $(env$(PATSIZE))
ECCGENERATOR			=	cis.bin boot.bin

# cis
cis$(RESOURCE)			=	$(IMAGEDIR)/cis.bin
cis$(PATSIZE)			=	$(call multiplyhex, $(FLASH_BLK_SIZE), 10)
cis$(BOOTTAB0)			=	$(cis$(MTDPART)),$(ipl$(MTDPART)),$(ipl_cust$(MTDPART)),$(uboot$(MTDPART))
cis$(BOOTTAB1)			=	$(ipl$(MTDPART)),$(ipl_cust$(MTDPART)),$(uboot$(MTDPART))
cis$(SYSTAB)			=	$(env$(MTDPART)),$(misc$(MTDPART)),$(rtos$(MTDPART))
cis$(MTDPART)			=	$(cis$(PATSIZE))(CIS)

# ipl
ipl$(RESOURCE)			=	$(PROJ_ROOT)/board/$(CHIP)/boot/$(FLASH_TYPE)/ipl-rtos/$(IPL_CONFIG)
ipl$(DATASIZE)			=	$(FLASH_BLK_SIZE)
ipl$(COPIES)			=	3
ipl$(PATSIZE)			=	$(call multiplyhex, $(ipl$(COPIES)), $(ipl$(DATASIZE)))
ipl$(MTDPART)			=	$(ipl$(PATSIZE))(IPL)

# ipl_cust
ipl_cust$(RESOURCE)		=	$(PROJ_ROOT)/board/$(CHIP)/boot/$(FLASH_TYPE)/ipl-rtos/$(IPL_CUST_CONFIG)
ipl_cust$(DATASIZE)		=	$(FLASH_BLK_SIZE)
ipl_cust$(COPIES)		=	3
ipl_cust$(PATSIZE)		=	$(call multiplyhex, $(ipl_cust$(COPIES)), $(ipl_cust$(DATASIZE)))
ipl_cust$(MTDPART)		=	$(ipl_cust$(PATSIZE))(IPL_CUST)

# uboot
uboot$(RESOURCE)		=	$(PROJ_ROOT)/board/uboot/$(UBOOT_BIN)
uboot$(DATASIZE)		=	0x60000
uboot$(COPIES)			=	1
uboot$(PATSIZE)			=	$(call sum, $(uboot$(DATASIZE)) $(call multiplyhex, $(FLASH_BLK_SIZE), 4))
uboot$(MTDPART)			=	$(uboot$(PATSIZE))(UBOOT)

# boot
boot$(RESOURCE)			=	$(IMAGEDIR)/boot.bin
boot$(PATSIZE)			=	$(call sum, $(ipl$(PATSIZE)) $(ipl_cust$(PATSIZE)) $(uboot$(PATSIZE)))
boot$(MTDPART)			=	$(boot$(PATSIZE))(BOOT),$(boot$(PATSIZE))(BOOT_BAK)
boot$(OTABLK)			=	/dev/mtd0 /dev/mtd1

# env
env$(PATSIZE)			=	0x40000
env$(MTDPART)			=	$(env$(PATSIZE))(ENV)

# misc
misc$(RESOURCE)			=	$(OUTPUTDIR)/misc
misc$(FSTYPE)			=	fwfs
misc$(PATSIZE)			=	0x400000
misc$(PATNAME)			=	MISC_RTOS
misc$(MOUNTTG)			=	/misc
misc$(MOUNTPT)			=	/dev/mtd5
misc$(MTDPART)			=	$(misc$(PATSIZE))(MISC_RTOS)
misc$(OTABLK)			=	/dev/mtd5
misc$(OPTIONS)			=	sz
ifeq ($(misc$(OPTIONS)), sz)
misc$(BOOTCMD)			=	loados nand by_header MISC_RTOS by_header\;
#endif

# rtos
rtos$(RESOURCE)			=	$(PROJ_ROOT)/board/rtos/$(RTOS_BIN)
rtos$(OPTIONS)			=   sz
rtos$(PATSIZE)			=	0x1C0000
rtos$(PATNAME)			=	RTOS RTOS_BACKUP
rtos$(BOOTENV)			=	$(RTOS_BOOT_ENV) mma_base=$(CONFIG_MMA_HEAP_ADDR) mma_size=$(CONFIG_MMA_HEAP_SIZE) rtosrd_addr=$(RTOS_RAMDISK_LOAD_ADDR) rtosrd_size=$(RTOS_RAMDISK_MEM_SIZE) rtosts_addr=$(RTOS_TIMESTAMP_RSVD_ADDR) rtosts_size=$(RTOS_TIMESTAMP_SIZE) rtos_master=$(RTOS_MASTER_HW_CORE) loglevel=3
rtos$(MTDPART)			=	$(rtos$(PATSIZE))(RTOS),$(rtos$(PATSIZE))(RTOS_BACKUP)
rtos$(BOOTCMD)			=	loados nand by_header RTOS by_header\;bootm \$${loados_addr}\;
