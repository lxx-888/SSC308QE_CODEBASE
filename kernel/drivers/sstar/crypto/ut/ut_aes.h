/*
 * ut_aes.h- Sigmastar
 *
 * Copyright (c) [2019~2020] SigmaStar Technology.
 *
 *
 * This software is licensed under the terms of the GNU General Public
 * License version 2, as published by the Free Software Foundation, and
 * may be copied, distributed, and modified under those terms.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License version 2 for more details.
 *
 */

#define SHA_DATA_SZ      2448
#define AES_SEGMENT_UNIT 0x400 // 1KB

#define CRYPTO_ONCE (1)
#if (CRYPTO_ONCE == 0)
#define AES_SEGMENT_UNIT 0x400 // 1KB
#endif

#define AEC_ALGO_DATA_SZ     2448 // must pad to multiple of 16
#define SHA_DATA_SZ          2448
#define AES_SEGMENT_UNIT     0x400 // 1KB
#define AESDMA_ATUONODE_NANE "aesdma"

#define GREEN_FONT "\033[32m"
#define RED_FONT   "\033[31m"
#define WHITE_FONT "\033[0m"

static char AesGoldenData[AEC_ALGO_DATA_SZ];

#define INPUT_FILE_SHA        "Input_SHA"
#define INPUT_FILE_RSA_BINARY "BINARY_RSA"
#define INPUT_FILE_RSA_PEM    "PEM_RSA"
#define INPUT_FILE_AES        "Input_AES"
#define OUT_FILE_RNG          "RNG"
//#define INPUT_FILE_RSA_D  "Input_RSA_D"

#define E_PUBLIC_E 0x03
#define E_KEY      0x82 // 02820101 public    //02820100 private

const u8 m_aes_key[16] = {0xAE, 0xDA, 0xDE, 0xAD, 0xAE, 0xDA, 0xDE, 0xAD,
                          0xDE, 0xAD, 0xAE, 0xDA, 0xDE, 0xAD, 0xAE, 0xDA};

const u8 m_aes_key_24[24] = {
    0x01, 0xAD, 0xAE, 0xDA, 0xDE, 0xAD, 0xAE, 0xDA, 0x02, 0xDA, 0xDE, 0xAD,
    0xAE, 0xDA, 0xDE, 0xAD, 0x03, 0xDA, 0xDE, 0xAD, 0xAE, 0xDA, 0xDE, 0xAD,
};

const u8 m_aes_key_32[32] = {
    0x01, 0xAD, 0xAE, 0xDA, 0xDE, 0xAD, 0xAE, 0xDA, 0x02, 0xDA, 0xDE, 0xAD, 0xAE, 0xDA, 0xDE, 0xAD,
    0x03, 0xDA, 0xDE, 0xAD, 0xAE, 0xDA, 0xDE, 0xAD, 0x04, 0xDA, 0xDE, 0xAD, 0xAE, 0xDA, 0xDE, 0xAD,
};

const u8 m_aes_iv[16] = {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
                         0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10};

// Exponent Normal value:65537
static char E_2048[256] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01};

// publickey
static char N_2048[256] = {
    0xd6, 0xd1, 0x7a, 0xe2, 0x65, 0x02, 0xdd, 0xee, 0xea, 0x4a, 0x5e, 0xe3, 0x49, 0x48, 0x0b, 0x57, 0x6f, 0xce, 0xc3,
    0x20, 0xe0, 0x97, 0x5a, 0x88, 0x06, 0x19, 0x84, 0x29, 0x76, 0x55, 0xb4, 0x4e, 0x07, 0x36, 0xf5, 0xff, 0x86, 0x1f,
    0x69, 0xd5, 0x8d, 0x9f, 0x74, 0x18, 0x23, 0x62, 0xde, 0x0f, 0xbd, 0x35, 0xd2, 0x42, 0xcf, 0x2f, 0xde, 0x53, 0x3d,
    0x73, 0xc4, 0xd7, 0x94, 0x9b, 0x25, 0x22, 0xd5, 0x16, 0x24, 0x3d, 0x91, 0xaf, 0x8b, 0xd5, 0xc7, 0x2e, 0x97, 0xee,
    0x7d, 0x1e, 0xe6, 0x09, 0x77, 0x3a, 0xc1, 0xcd, 0x67, 0xab, 0xc2, 0xd5, 0x36, 0x11, 0x71, 0x6d, 0x47, 0xc3, 0xd0,
    0x01, 0xb7, 0x97, 0x44, 0x36, 0x45, 0x11, 0x3b, 0xd1, 0xb9, 0x7e, 0xbe, 0x88, 0x43, 0x87, 0x0b, 0xc3, 0xa0, 0x6e,
    0x8c, 0x6e, 0xb4, 0x2f, 0xb8, 0x60, 0xc1, 0xfb, 0x6c, 0xfd, 0x72, 0xfc, 0x04, 0x05, 0x12, 0xb4, 0x9f, 0x2d, 0x2b,
    0x3c, 0xd0, 0xe2, 0x93, 0x03, 0x7b, 0xd3, 0xd4, 0xfd, 0x02, 0x8a, 0xd0, 0xc6, 0x1f, 0x34, 0x75, 0x24, 0x88, 0x53,
    0xb0, 0x86, 0xc5, 0x44, 0xd9, 0xad, 0x78, 0x43, 0x97, 0x9a, 0xc9, 0x88, 0xea, 0x5a, 0xa7, 0xed, 0x45, 0x9f, 0xfe,
    0x82, 0x8b, 0xbe, 0xf7, 0xbb, 0xd7, 0xac, 0x36, 0xda, 0x4d, 0x37, 0xec, 0x4c, 0x40, 0xdb, 0x51, 0x15, 0x93, 0x61,
    0x4b, 0x62, 0x09, 0xd1, 0xe6, 0x6a, 0xb9, 0x4e, 0x52, 0x9f, 0x99, 0xd0, 0xfb, 0x2b, 0xc4, 0x7f, 0x6c, 0xfb, 0x2d,
    0x33, 0x14, 0x9a, 0xea, 0xca, 0x7a, 0xb8, 0xf8, 0x07, 0xef, 0x92, 0x55, 0xa9, 0x2d, 0x7a, 0xf8, 0x5d, 0x78, 0xe8,
    0x74, 0xf8, 0x29, 0x67, 0xd1, 0x16, 0xe9, 0x73, 0xb3, 0xb7, 0x7f, 0x1c, 0x19, 0x12, 0x64, 0x8d, 0x5c, 0xae, 0xe6,
    0x1a, 0x06, 0xba, 0x8f, 0x4a, 0x58, 0x65, 0x34, 0x31};

// Private Exponent
static char Pexponent_2048[256] = {
    0x60, 0xc9, 0x91, 0x6c, 0x5f, 0xc6, 0xa2, 0xe7, 0xfa, 0x77, 0xf7, 0xb8, 0xc0, 0x53, 0xcd, 0x88, 0x5f, 0xbf, 0xf0,
    0xfa, 0xe7, 0x36, 0x4a, 0x7b, 0xef, 0x03, 0xa0, 0x20, 0x6e, 0x48, 0xbf, 0x2c, 0x48, 0xe3, 0xe2, 0x82, 0x76, 0x93,
    0xc0, 0xc3, 0x8f, 0x43, 0xc0, 0xb2, 0xff, 0x7e, 0x94, 0x3e, 0xd3, 0x29, 0x64, 0xca, 0xe5, 0x3e, 0xd4, 0x14, 0xfd,
    0x23, 0x24, 0x15, 0x5d, 0xc7, 0x69, 0x3c, 0x00, 0x76, 0x31, 0x6d, 0xec, 0x2e, 0x03, 0xfb, 0x15, 0xfb, 0x50, 0x49,
    0x0b, 0xe6, 0xd8, 0x0e, 0x7b, 0xc1, 0xe5, 0x7f, 0xfe, 0xad, 0xcc, 0xe2, 0xf3, 0xb1, 0x78, 0x41, 0x9c, 0x8c, 0x05,
    0x34, 0x40, 0xdb, 0xce, 0xc8, 0x04, 0xe6, 0x76, 0xe5, 0x4f, 0x86, 0x63, 0xa2, 0x51, 0x8a, 0x8f, 0x2a, 0x5d, 0x26,
    0x71, 0xef, 0x8f, 0x0f, 0xd1, 0x2b, 0x07, 0x3b, 0x99, 0x27, 0xb8, 0x9f, 0x03, 0xcf, 0xd1, 0x3f, 0x14, 0x57, 0xd5,
    0xee, 0x14, 0x12, 0xb7, 0x97, 0xaa, 0x62, 0xdf, 0x17, 0xdc, 0x9a, 0x78, 0x60, 0x30, 0x1b, 0x87, 0xff, 0x2d, 0xd4,
    0xf4, 0x24, 0xb8, 0x6a, 0x32, 0xa0, 0x09, 0x7a, 0x51, 0xe8, 0xdc, 0x6a, 0xfa, 0xed, 0x4a, 0x1d, 0xfa, 0x69, 0x9b,
    0x29, 0x5a, 0x7f, 0xe1, 0x41, 0x75, 0xd3, 0x5d, 0x56, 0xf0, 0xbe, 0xfe, 0xd3, 0xcf, 0xb1, 0xd1, 0xac, 0x27, 0xea,
    0xa5, 0xb8, 0x58, 0xa7, 0xc1, 0x41, 0x90, 0x25, 0x1f, 0x1d, 0x8d, 0xb8, 0x7b, 0xc7, 0xda, 0x55, 0x23, 0x13, 0xb9,
    0x7a, 0x5d, 0xa0, 0x1e, 0x3b, 0xd4, 0x50, 0xcb, 0x31, 0xc4, 0x23, 0x0b, 0x31, 0x53, 0xb2, 0xb9, 0x9b, 0x49, 0xe2,
    0x8f, 0x3c, 0x50, 0x0e, 0x7f, 0x5b, 0x00, 0x7c, 0xb0, 0x72, 0xb0, 0xe1, 0x51, 0x3f, 0x12, 0x32, 0xd1, 0x0c, 0x70,
    0x4b, 0xbe, 0xa7, 0xd9, 0x6b, 0x1f, 0x53, 0x6e, 0x81};

static char g_date[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
                        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
                        0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0x00, 0xbb, 0xcc, 0xdd, 0xee, 0xff};

static char sign_2048[256] = {
    0x2a, 0x0d, 0xdc, 0xdf, 0x48, 0x42, 0x88, 0x43, 0xf0, 0x38, 0x6d, 0x48, 0x5f, 0x91, 0x32, 0x87, 0x32, 0x80, 0x15,
    0x23, 0x41, 0x93, 0x9e, 0x76, 0x58, 0xb5, 0x67, 0x25, 0x35, 0xa3, 0xcf, 0x25, 0xc0, 0x4c, 0x6f, 0x59, 0xcf, 0x23,
    0x11, 0xd2, 0xa9, 0x85, 0x05, 0x55, 0x88, 0x7e, 0x9f, 0xad, 0x94, 0xca, 0x58, 0x3d, 0x0e, 0x74, 0xcc, 0xe9, 0x00,
    0x42, 0x06, 0x05, 0x7d, 0x42, 0x47, 0x82, 0x53, 0x6a, 0xc6, 0x8d, 0x6b, 0xcb, 0xc5, 0x77, 0xce, 0xc9, 0x4c, 0xd9,
    0x6a, 0x16, 0x86, 0xc1, 0x3a, 0x17, 0xa0, 0x62, 0x45, 0x73, 0x1a, 0x30, 0x20, 0xa0, 0x76, 0xbd, 0xbc, 0x49, 0x35,
    0x43, 0x5a, 0x79, 0xfc, 0x55, 0xbd, 0x2f, 0x04, 0xf9, 0xdd, 0x77, 0x14, 0xa2, 0x3a, 0x7b, 0x4f, 0xad, 0x33, 0x0c,
    0x17, 0x53, 0xe4, 0xf8, 0x3a, 0xef, 0x34, 0xcd, 0xd0, 0xb3, 0x6c, 0x64, 0x9d, 0x66, 0xce, 0x71, 0x5f, 0x54, 0x3b,
    0x70, 0x31, 0xb2, 0x37, 0x15, 0xec, 0x1e, 0xcf, 0xec, 0xa9, 0xf3, 0x01, 0x75, 0x8a, 0x5b, 0x06, 0x40, 0x6e, 0x0a,
    0xb7, 0x5d, 0x23, 0x68, 0xc3, 0xe7, 0xe5, 0x9d, 0x5b, 0x3a, 0xed, 0xd4, 0x01, 0x36, 0x21, 0x35, 0xf3, 0x64, 0x62,
    0xba, 0x31, 0x43, 0xbd, 0x24, 0x18, 0x46, 0xde, 0xb8, 0x98, 0x07, 0x4e, 0x38, 0x56, 0x7f, 0xee, 0x57, 0x2b, 0x08,
    0x29, 0x93, 0xb1, 0xa2, 0x73, 0xe2, 0xea, 0xf6, 0x1d, 0x46, 0x37, 0x75, 0xfd, 0x53, 0x7f, 0xe4, 0xb7, 0x55, 0xca,
    0x03, 0x88, 0x62, 0xab, 0xb4, 0xd7, 0xec, 0x10, 0x12, 0x6b, 0x69, 0x8f, 0x98, 0x04, 0x6f, 0x87, 0xc1, 0xcb, 0xd1,
    0xab, 0x25, 0xd1, 0xb1, 0xf0, 0xe6, 0xa1, 0xd7, 0x8e, 0xc2, 0xea, 0x25, 0x8a, 0x34, 0xcb, 0x44, 0xe1, 0x41, 0xbe,
    0x81, 0x13, 0x36, 0x18, 0xb7, 0x32, 0xa6, 0xe1, 0xf6};

static char sign_1024[128] = {
    0x66, 0x84, 0x63, 0x2f, 0x03, 0x22, 0xbf, 0x11, 0x95, 0x4a, 0x25, 0x6a, 0xb4, 0x27, 0x98, 0xdc, 0xa3, 0xd2, 0x98,
    0xa3, 0xdc, 0x5d, 0x70, 0x6a, 0x73, 0x43, 0x53, 0xcf, 0x3e, 0xb9, 0xb2, 0xe8, 0xba, 0x33, 0xf8, 0x8f, 0xeb, 0x97,
    0x95, 0x2c, 0x8d, 0x96, 0x2a, 0x9f, 0xda, 0x9e, 0xb7, 0x9a, 0x10, 0x76, 0x43, 0x5b, 0x6c, 0xd7, 0x52, 0x17, 0x35,
    0xfd, 0x47, 0xf8, 0x74, 0x9e, 0x29, 0xbe, 0x36, 0x3a, 0x1c, 0xb4, 0xe0, 0xf6, 0x2c, 0x1d, 0xb1, 0x68, 0xea, 0x3f,
    0x64, 0x60, 0x39, 0xf0, 0x98, 0xd3, 0x07, 0x80, 0x48, 0x30, 0x90, 0x7b, 0x87, 0x7d, 0xb2, 0x20, 0xef, 0x9b, 0x64,
    0x21, 0x41, 0x60, 0x62, 0x7b, 0x51, 0x57, 0x66, 0x1f, 0x76, 0xb7, 0x36, 0xea, 0xe8, 0x15, 0x8a, 0x0f, 0x1c, 0x69,
    0xfa, 0x38, 0x49, 0xcf, 0xe7, 0xee, 0x70, 0x5a, 0xe5, 0xe4, 0xbb, 0x43, 0x85, 0x25};
// publickey
static char N_1024[128] = {
    0xbf, 0x8d, 0x49, 0x5b, 0xb0, 0xa3, 0x45, 0x09, 0x09, 0x43, 0x89, 0x0c, 0x5c, 0x85, 0xe0, 0xfa, 0x35, 0xa0, 0x64,
    0xd5, 0x2c, 0xb3, 0x9c, 0x44, 0xe0, 0xd2, 0xce, 0x08, 0x33, 0x90, 0x02, 0x52, 0x0c, 0x84, 0x84, 0xd8, 0x64, 0x7d,
    0x87, 0x4b, 0x38, 0xd2, 0xc9, 0xf9, 0x82, 0x81, 0x0d, 0xf9, 0x87, 0x19, 0x5c, 0xdb, 0x88, 0x1b, 0x91, 0xbf, 0x89,
    0x9f, 0x11, 0x4e, 0xa9, 0x8c, 0xed, 0x83, 0x51, 0xf6, 0x78, 0x2e, 0xf8, 0x2f, 0x8d, 0x4f, 0x9e, 0x6f, 0xb3, 0x14,
    0x5d, 0xb3, 0x9e, 0xab, 0x80, 0xbc, 0xfe, 0x8a, 0xdc, 0x89, 0x54, 0x3c, 0x35, 0x6a, 0x11, 0xe0, 0x81, 0x95, 0x85,
    0xc9, 0x0d, 0x0d, 0xfc, 0x3a, 0xd3, 0x4a, 0xc2, 0xf9, 0x52, 0x6f, 0xc1, 0x9b, 0x37, 0x81, 0x0c, 0xf1, 0x79, 0xf9,
    0xf8, 0x8c, 0xa0, 0x4d, 0x16, 0x07, 0x94, 0x40, 0x47, 0x68, 0x70, 0xcb, 0x34, 0xff};
// Private Exponent
static char Pexponent_1024[128] = {
    0x77, 0xdb, 0x00, 0xee, 0xc5, 0x4c, 0xb3, 0xd2, 0x9e, 0xa0, 0x4a, 0x6d, 0x98, 0xab, 0x10, 0x85, 0x9e, 0xee, 0x78,
    0x89, 0x46, 0x8a, 0x30, 0x1a, 0x8d, 0x0e, 0x7a, 0x6a, 0x79, 0x50, 0xff, 0x92, 0xb5, 0x50, 0x6a, 0x0b, 0x38, 0x7d,
    0xaf, 0x1d, 0x2b, 0x36, 0x01, 0xb9, 0x04, 0xa6, 0x99, 0xc6, 0xeb, 0x78, 0xbc, 0x38, 0x85, 0x26, 0xb3, 0x00, 0xc5,
    0x2c, 0xe9, 0xd8, 0x6d, 0x90, 0xc7, 0xbf, 0xce, 0xcb, 0x51, 0xc5, 0xa2, 0xaa, 0xfa, 0x68, 0x88, 0xf4, 0x0e, 0xfd,
    0x06, 0xbc, 0x77, 0xe1, 0x16, 0xc0, 0x35, 0xda, 0x0b, 0xb5, 0x3c, 0x16, 0xd7, 0xae, 0x56, 0x28, 0x95, 0xd8, 0xa8,
    0xa5, 0x59, 0x8f, 0x50, 0x0d, 0xd4, 0xc9, 0x8e, 0xc7, 0x97, 0x2e, 0x99, 0x9d, 0xca, 0x9d, 0x50, 0x94, 0x05, 0x69,
    0x5c, 0xa3, 0xd4, 0xc1, 0x4c, 0xdf, 0x42, 0x85, 0xa7, 0x55, 0xd7, 0xad, 0xef, 0xd1};
static char E_1024[128] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01};

char E_4096[512] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01};

#ifdef SUPPORT_RSA4096

char sign_4096[512] = {
    0x44, 0x14, 0xe4, 0x16, 0xe7, 0x58, 0x9d, 0xc4, 0xeb, 0x65, 0x93, 0xe2, 0x5b, 0xd1, 0x85, 0x81, 0xc8, 0x12, 0x7e,
    0xec, 0x7f, 0x55, 0x1d, 0xbb, 0x51, 0x68, 0xcc, 0xcb, 0xdd, 0xce, 0x9e, 0x57, 0x6c, 0x0c, 0x16, 0xa6, 0xcc, 0x5f,
    0xe0, 0x5d, 0x66, 0x72, 0x39, 0x09, 0xa0, 0xdf, 0x36, 0xff, 0x56, 0xed, 0xff, 0x58, 0x10, 0xdd, 0x66, 0xf4, 0x8e,
    0xd8, 0xba, 0x49, 0x50, 0x32, 0x5e, 0x2e, 0x41, 0x68, 0x27, 0xf5, 0x00, 0x6e, 0x2f, 0x80, 0x92, 0x72, 0xf4, 0x00,
    0x61, 0x53, 0x0a, 0x42, 0xf8, 0x54, 0xce, 0xcf, 0x1c, 0x64, 0x20, 0x88, 0x2b, 0xc2, 0xa5, 0xf1, 0x96, 0x39, 0x40,
    0x39, 0x11, 0x9b, 0x42, 0x6d, 0xc4, 0xc2, 0xb0, 0x53, 0x51, 0x07, 0xaa, 0xd4, 0x4b, 0x3d, 0xa4, 0xf6, 0x70, 0xf9,
    0xce, 0x74, 0xbb, 0x81, 0xd8, 0xf9, 0x20, 0x7e, 0x6d, 0x44, 0xf3, 0xbc, 0xef, 0x29, 0x4d, 0x7f, 0x27, 0xff, 0xbc,
    0x04, 0x6c, 0xc0, 0x41, 0x0c, 0xbc, 0x7c, 0x09, 0x8b, 0x10, 0x7d, 0x62, 0xec, 0xf2, 0xd2, 0xdd, 0x54, 0x27, 0xec,
    0x81, 0xce, 0x2b, 0xee, 0x83, 0xa5, 0xa8, 0x6e, 0xb7, 0xb9, 0xe2, 0x70, 0x5b, 0x0c, 0x8e, 0x65, 0x98, 0xff, 0xdd,
    0x26, 0x7a, 0x7e, 0xf0, 0x96, 0xfa, 0x0a, 0xba, 0x1b, 0x6d, 0x45, 0x88, 0xfd, 0x7a, 0x7e, 0x87, 0xf8, 0xb5, 0x4e,
    0xe2, 0x43, 0x01, 0x50, 0x69, 0x7a, 0xdb, 0x0d, 0xfd, 0xb6, 0xdd, 0x6a, 0xa4, 0x03, 0xb8, 0x04, 0xc5, 0x52, 0x5f,
    0x19, 0xf3, 0x61, 0x99, 0xea, 0xe6, 0x4e, 0xc0, 0xa8, 0xa5, 0xf7, 0xf1, 0x91, 0xf9, 0x06, 0x4f, 0x78, 0x7f, 0x0d,
    0x6d, 0xbd, 0x41, 0xd5, 0xb1, 0x86, 0xf1, 0x00, 0x6e, 0x84, 0x82, 0xa5, 0x1c, 0x98, 0xe7, 0xd1, 0x16, 0x4f, 0x2d,
    0x67, 0x56, 0xd8, 0xa0, 0xb4, 0xa9, 0x6c, 0x3b, 0x47, 0x09, 0x1a, 0x75, 0x10, 0x41, 0xe5, 0x4e, 0xdd, 0x41, 0x5f,
    0x7d, 0x3e, 0xc9, 0x80, 0xbb, 0x0e, 0x9b, 0x81, 0x52, 0x91, 0xf1, 0x05, 0x38, 0xff, 0xe6, 0xe8, 0xc1, 0xee, 0x94,
    0x39, 0x26, 0xd5, 0x6b, 0xb2, 0x72, 0xc9, 0x7e, 0x53, 0x06, 0xa6, 0x91, 0x90, 0x23, 0x38, 0xc8, 0x7c, 0xa6, 0xf5,
    0xce, 0x2d, 0x57, 0xbc, 0x42, 0x5f, 0x7c, 0xbc, 0x82, 0x75, 0xb7, 0xf2, 0x17, 0x56, 0x37, 0xd4, 0xbb, 0xe6, 0xe8,
    0xb7, 0x7c, 0x9a, 0xad, 0xc7, 0x6a, 0xff, 0x5b, 0x4d, 0xb8, 0x1b, 0xa7, 0x8a, 0xeb, 0xec, 0xfd, 0x6b, 0xf5, 0x88,
    0xa9, 0x62, 0x01, 0x21, 0x29, 0x3b, 0x4b, 0x05, 0xda, 0xcd, 0xe6, 0xc5, 0xf4, 0x64, 0xca, 0x9b, 0x2b, 0x22, 0xd4,
    0xe3, 0x3b, 0xfb, 0x15, 0x04, 0x6e, 0x87, 0x1c, 0xbd, 0x9e, 0x0c, 0xff, 0x79, 0x2e, 0xb0, 0x7f, 0x5d, 0x28, 0xdc,
    0xec, 0x99, 0xbb, 0x3c, 0x3d, 0x3c, 0x50, 0xb5, 0xa0, 0x75, 0xba, 0x06, 0x99, 0xb7, 0x6a, 0x33, 0x53, 0x7a, 0x80,
    0x6b, 0x89, 0x0e, 0x17, 0x95, 0xd5, 0xa1, 0x0a, 0x7d, 0x57, 0x4a, 0x00, 0x15, 0x92, 0xfd, 0x3d, 0xbe, 0x03, 0x52,
    0xab, 0x78, 0x69, 0xec, 0x98, 0x93, 0xc2, 0x83, 0xf7, 0x33, 0x6f, 0x8b, 0x8b, 0xe0, 0x8c, 0x4a, 0x4e, 0xdf, 0x13,
    0x88, 0xdc, 0x2d, 0xd8, 0x54, 0xa7, 0x33, 0x05, 0xba, 0xca, 0x4c, 0x67, 0x6c, 0x9e, 0x39, 0x19, 0xce, 0x67, 0x21,
    0xbf, 0x7f, 0x15, 0xab, 0xaa, 0x40, 0x4a, 0x61, 0x4b, 0x7c, 0x5b, 0x1a, 0x8a, 0x6f, 0xa7, 0xea, 0x1b, 0x36, 0x7e,
    0xb9, 0x3e, 0x61, 0xc5, 0xc5, 0xc7, 0x2c, 0x8c, 0xbe, 0xe2, 0x6c, 0xc1, 0x0b, 0x63, 0x8c, 0x73, 0xb9, 0x99, 0x05,
    0xe0, 0x45, 0xc9, 0xfc, 0x2b, 0xd2, 0x9e, 0x38, 0x2e, 0x7f, 0x05, 0x37, 0xa4, 0x0f, 0x0b, 0xb8, 0x58, 0x14};

// publickey
char N_4096[512] = {
    0xb0, 0xdd, 0x66, 0x56, 0xe5, 0xd1, 0xd1, 0xbc, 0x9b, 0x89, 0xd0, 0x0c, 0x1c, 0x5e, 0x26, 0x3d, 0xbb, 0xf1, 0x88,
    0x56, 0x72, 0x60, 0x43, 0x4b, 0x4a, 0x52, 0x41, 0x6b, 0x27, 0xec, 0xee, 0x96, 0x50, 0xf2, 0x8c, 0xb8, 0x5d, 0x95,
    0x42, 0xeb, 0x2c, 0x0b, 0x03, 0x41, 0xba, 0x3c, 0x6c, 0x40, 0x97, 0xd3, 0x10, 0x49, 0xad, 0x2a, 0x57, 0xcf, 0x51,
    0x56, 0x0a, 0x52, 0x6f, 0x2e, 0xfe, 0xc8, 0xd6, 0x3c, 0x9b, 0x55, 0x9b, 0x4a, 0x97, 0x15, 0x70, 0x41, 0x6b, 0xbd,
    0xbb, 0x9c, 0xe3, 0xed, 0xa8, 0xcd, 0x38, 0xa1, 0xc2, 0x5f, 0x39, 0xcb, 0x71, 0x91, 0xf0, 0xf9, 0x80, 0x05, 0xe8,
    0xc7, 0x01, 0xe8, 0xb2, 0xb8, 0x10, 0xc2, 0xcd, 0x56, 0xad, 0xf2, 0xb1, 0xb3, 0xa1, 0x91, 0x73, 0xb6, 0x79, 0xd8,
    0xa6, 0x09, 0x36, 0xe0, 0xe3, 0x57, 0xfa, 0xbc, 0x9c, 0x3f, 0x2a, 0xdc, 0x59, 0xa3, 0xbf, 0xac, 0x8d, 0x41, 0x25,
    0x51, 0x75, 0x5d, 0x7f, 0x11, 0x6d, 0x2e, 0xaf, 0x90, 0x61, 0x76, 0xe6, 0xb0, 0xc0, 0xad, 0x61, 0x8a, 0xac, 0x37,
    0x15, 0x4f, 0x5d, 0x3e, 0x6f, 0x2d, 0xd3, 0x1c, 0x25, 0x48, 0x0d, 0x4e, 0x5f, 0x37, 0x4c, 0x00, 0x25, 0x91, 0x30,
    0x8c, 0x7f, 0x7a, 0xcb, 0x49, 0x6e, 0xc1, 0x92, 0x25, 0xc9, 0x27, 0x7a, 0xd6, 0x01, 0xa4, 0x86, 0x30, 0x8f, 0x51,
    0xa5, 0x12, 0xce, 0x80, 0x15, 0x50, 0x01, 0x86, 0x3d, 0x79, 0x15, 0x07, 0x9c, 0x70, 0x59, 0x8a, 0x7a, 0xf1, 0x0c,
    0x6b, 0x1d, 0xb5, 0x25, 0xd2, 0x8c, 0x39, 0x4b, 0x2f, 0x8d, 0xa2, 0x7e, 0x4b, 0x25, 0xc0, 0xad, 0x88, 0xb2, 0x56,
    0x6d, 0x59, 0xa8, 0xc1, 0xcf, 0xa8, 0xa8, 0x56, 0x06, 0x13, 0xe1, 0x20, 0x5d, 0x5d, 0xc9, 0xeb, 0x96, 0xf2, 0x5e,
    0xcc, 0x57, 0x86, 0x2a, 0xba, 0xad, 0x72, 0x91, 0xa3, 0x79, 0xb7, 0x95, 0x60, 0xd6, 0x34, 0xc7, 0xc9, 0x6c, 0xc9,
    0x51, 0xeb, 0x1c, 0x83, 0x9a, 0xe4, 0x0c, 0xad, 0xfa, 0x06, 0x10, 0x07, 0x44, 0x45, 0xc1, 0xae, 0x5a, 0xee, 0x38,
    0x03, 0x30, 0xda, 0xc1, 0x6a, 0xdd, 0xb2, 0x59, 0xdd, 0x48, 0x3c, 0xde, 0x6d, 0xf0, 0xde, 0x21, 0x1c, 0x65, 0x53,
    0x30, 0x10, 0x3c, 0x78, 0x48, 0x3a, 0x80, 0xaa, 0x67, 0x57, 0x18, 0xd1, 0x21, 0xda, 0x77, 0x92, 0xcb, 0x29, 0xe4,
    0xd0, 0x8e, 0x99, 0x64, 0xb3, 0x66, 0xa2, 0x02, 0x68, 0xc4, 0x76, 0x41, 0x98, 0x7e, 0xf8, 0x20, 0x29, 0x70, 0xf3,
    0x9b, 0xdb, 0xf4, 0xf5, 0x2d, 0x49, 0x83, 0xb7, 0x9f, 0xfb, 0x28, 0x67, 0x78, 0x2b, 0x2d, 0x35, 0x95, 0x90, 0x15,
    0xd3, 0xc9, 0xef, 0xe9, 0xa6, 0xc4, 0xdd, 0xd3, 0x69, 0x05, 0x26, 0x12, 0x38, 0x10, 0x2e, 0x64, 0x74, 0x36, 0xee,
    0x18, 0x04, 0x6a, 0x25, 0x1f, 0xf0, 0x08, 0xd6, 0xae, 0x12, 0xe7, 0xbc, 0x81, 0x5b, 0x16, 0xb5, 0x34, 0x21, 0xc0,
    0xcb, 0x97, 0x1d, 0x43, 0xde, 0x79, 0x99, 0x7a, 0xef, 0x5d, 0x6f, 0xc4, 0x38, 0xe0, 0xd8, 0xb2, 0x63, 0x8c, 0xee,
    0xf4, 0xaf, 0x44, 0x16, 0x44, 0xfb, 0xc0, 0x97, 0xad, 0xe3, 0x11, 0xd3, 0xcd, 0x51, 0x3c, 0x99, 0x5b, 0x64, 0x53,
    0x1e, 0x65, 0xf0, 0x09, 0x07, 0xd9, 0x83, 0x3b, 0x0f, 0x9e, 0x88, 0x6e, 0x0c, 0x49, 0x0c, 0xa7, 0x84, 0x68, 0x84,
    0xce, 0xc6, 0xda, 0xbe, 0x10, 0xb3, 0xc0, 0x29, 0xcd, 0xe0, 0x54, 0xea, 0x3a, 0xd1, 0x68, 0x20, 0x2a, 0xe2, 0xe2,
    0x53, 0x97, 0x8b, 0x2e, 0xd0, 0xd0, 0x90, 0x7f, 0x61, 0xaa, 0xfb, 0xc8, 0xd9, 0x7a, 0x3a, 0x97, 0x98, 0xaa, 0x86,
    0xe5, 0x88, 0x22, 0x59, 0x4b, 0x70, 0x6b, 0xb5, 0xb3, 0x74, 0xc2, 0x6f, 0x88, 0x4b, 0x73, 0xfb, 0x4a, 0x65};

// Private Exponent
char Pexponent_4096[512] = {
    0x90, 0x4e, 0xc5, 0x6e, 0xc7, 0xab, 0xb0, 0x26, 0xe4, 0xfd, 0xc8, 0x2b, 0xe9, 0x85, 0x84, 0x4c, 0x40, 0xaa, 0x2d,
    0x64, 0xe3, 0x83, 0xd9, 0xc4, 0x77, 0xca, 0xaf, 0xa7, 0xdf, 0xf6, 0xb9, 0x21, 0x1a, 0xc1, 0x1c, 0xc2, 0x5d, 0x51,
    0x29, 0x3d, 0xbb, 0x3c, 0xed, 0x16, 0x56, 0xff, 0x70, 0x10, 0x30, 0x10, 0xbd, 0xac, 0x6f, 0xc7, 0x29, 0xc8, 0x75,
    0x83, 0xef, 0x7e, 0x1d, 0x4b, 0xca, 0x05, 0x52, 0x90, 0x36, 0xe9, 0xdd, 0x80, 0x39, 0xcf, 0xfb, 0x3c, 0xd5, 0xcd,
    0x04, 0x64, 0x59, 0xb1, 0x13, 0x57, 0x07, 0x0b, 0x2d, 0x0e, 0x07, 0x99, 0x10, 0x7c, 0x54, 0x93, 0x2e, 0xbb, 0x23,
    0x98, 0x24, 0xdd, 0x99, 0xdd, 0x07, 0x87, 0xfa, 0x84, 0xeb, 0xff, 0x26, 0xb0, 0xfb, 0x76, 0x33, 0x64, 0xc2, 0xfc,
    0x5b, 0x55, 0x0f, 0x5a, 0xe5, 0x04, 0x67, 0x08, 0x37, 0xb0, 0x6e, 0xa7, 0x45, 0xd8, 0x8e, 0xcf, 0x1a, 0x9d, 0xf9,
    0xf6, 0x01, 0xfe, 0x1c, 0x6c, 0xba, 0x9a, 0x2a, 0x13, 0x73, 0x02, 0xd1, 0xed, 0x8b, 0xf8, 0xab, 0xaa, 0xbb, 0x23,
    0x62, 0x96, 0xd3, 0xec, 0xda, 0x48, 0x18, 0x85, 0x51, 0x81, 0xfd, 0xa1, 0x61, 0x9d, 0x3b, 0xbc, 0xae, 0xea, 0x4d,
    0x23, 0x85, 0xec, 0x4a, 0x2c, 0x0b, 0x5b, 0x93, 0x84, 0x93, 0x21, 0x4c, 0x5f, 0x8b, 0x0d, 0x93, 0x93, 0xd1, 0x8c,
    0x7b, 0x54, 0xe1, 0xfa, 0xad, 0xe9, 0x0e, 0xa5, 0x5a, 0x49, 0x0e, 0x38, 0x9c, 0x93, 0x2a, 0xec, 0x0b, 0xad, 0xdc,
    0x45, 0x16, 0x03, 0x34, 0xee, 0x1b, 0x0d, 0xb0, 0x64, 0x07, 0x7b, 0x7a, 0xf2, 0x93, 0xc6, 0x27, 0x91, 0x6e, 0x79,
    0x88, 0x55, 0x6c, 0x95, 0x5e, 0x7b, 0x2d, 0x86, 0xab, 0x04, 0xd3, 0x5e, 0x55, 0xef, 0xed, 0x8d, 0xf5, 0x26, 0xa2,
    0xe4, 0xb5, 0xd1, 0x39, 0xd2, 0x01, 0x2d, 0x86, 0xd7, 0xf1, 0x5c, 0x2b, 0x28, 0x2b, 0x2b, 0x38, 0x93, 0x43, 0xeb,
    0xd2, 0xaf, 0x9c, 0xf0, 0x20, 0xf0, 0xe4, 0x99, 0x0f, 0x57, 0xbc, 0xdf, 0xa9, 0xe8, 0xcc, 0x7a, 0x4b, 0x60, 0x8f,
    0x08, 0x7a, 0xfa, 0x70, 0x12, 0x31, 0x00, 0x1a, 0x9f, 0x4f, 0xbf, 0xad, 0xf4, 0x46, 0x1c, 0xc6, 0xc8, 0xa6, 0x13,
    0x47, 0x90, 0x9d, 0x7d, 0x0c, 0x5e, 0xbb, 0xc7, 0x3f, 0xcc, 0x6f, 0x88, 0x2f, 0x2f, 0x55, 0xf0, 0x9d, 0xad, 0x4c,
    0x0a, 0x08, 0xa5, 0x99, 0x72, 0xd9, 0x8b, 0xd8, 0xff, 0x5e, 0x68, 0x31, 0x49, 0xd1, 0x3f, 0x13, 0xef, 0xd7, 0xde,
    0xb9, 0x97, 0x28, 0x7b, 0x89, 0x8d, 0x4b, 0xc2, 0x10, 0xf4, 0x60, 0x33, 0x95, 0xca, 0x37, 0x46, 0xe2, 0x87, 0x0b,
    0x1a, 0x11, 0x26, 0xc9, 0x7d, 0xf0, 0x91, 0x5e, 0x1c, 0x71, 0xcd, 0xf8, 0x3f, 0xb8, 0xb3, 0x09, 0x1b, 0xa9, 0x6e,
    0x91, 0xa0, 0x64, 0xa2, 0x81, 0x6a, 0x5c, 0x38, 0xf5, 0x8f, 0x3a, 0x14, 0xb0, 0x8c, 0x94, 0x6a, 0x4b, 0xff, 0x6e,
    0xbc, 0x85, 0xb7, 0x6e, 0xa7, 0x02, 0x30, 0xed, 0x1f, 0x0b, 0x01, 0xd7, 0x3a, 0x52, 0x9f, 0x7c, 0xbf, 0x8f, 0x23,
    0x6b, 0xa9, 0x25, 0xab, 0x1b, 0x5a, 0x8d, 0x90, 0x8b, 0x33, 0x84, 0xf9, 0xb7, 0xbc, 0x40, 0x50, 0xce, 0xd6, 0x85,
    0x23, 0xe2, 0x03, 0x07, 0xe9, 0x90, 0xab, 0x9d, 0x57, 0xb0, 0x23, 0x47, 0x85, 0x5e, 0xdb, 0xd1, 0xce, 0x7b, 0x77,
    0xc6, 0x20, 0x0b, 0x1d, 0x16, 0x6d, 0x44, 0x76, 0x15, 0xb7, 0xc7, 0x0d, 0x29, 0xa8, 0x2d, 0x93, 0x58, 0x85, 0x0c,
    0x47, 0x5a, 0xe7, 0x4f, 0x29, 0x33, 0xb2, 0xe7, 0x58, 0xdf, 0x12, 0x89, 0x1b, 0x5e, 0x2e, 0xc4, 0xd9, 0x84, 0xa6,
    0x4b, 0xe6, 0xcd, 0xdd, 0xb3, 0x69, 0x39, 0x1b, 0x3d, 0x1f, 0x6b, 0xa1, 0x91, 0x54, 0xc1, 0x23, 0xd6, 0xcd};

#ifdef SUPPORT_PKA
#define CONFIG_RIU_BASE_ADDRESS 0xFD000000

// ecc_512 to hard code test hw
#define PKA0_BASE (CONFIG_RIU_BASE_ADDRESS + (0x1AC000UL << 1))
#define PKA1_BASE (CONFIG_RIU_BASE_ADDRESS + (0x1AC100UL << 1))
#define PKA2_BASE (CONFIG_RIU_BASE_ADDRESS + (0x1AC200UL << 1))

#define ECC0_REG32(x) (*((volatile unsigned long *)(PKA0_BASE + ((x) << 2))))
#define ECC1_REG32(x) (*((volatile unsigned long *)(PKA1_BASE + ((x) << 2))))
#define ECC2_REG32(x) (*((volatile unsigned long *)(PKA2_BASE + ((x) << 2))))

#define PKA_BANK_MAIN_CTL     0x00
#define PKA_BANK_ENTRY_PIONT  0x01
#define PKA_BANK_ISR_STATUS   0x02
#define PKA_BANK_BUILD_CONFIG 0x03
#define PKA_BANK_STACK_PIONT  0x04
#define PKA_BANK_INSTR_SINGE  0x05
#define PKA_BANK_CONFIG       0x07
#define PKA_BANK_STAT         0x08
#define PKA_BANK_FLAGS        0x09
#define PKA_BANK_IRQ_EN       0x10
#define PKA_BANK_PROBABILITY  0x11
#define PKA_BANK_FROB         0x12

unsigned long ecc_512_0[] = {
    0x583a48f3, 0x28aa6056, 0x2d82c685, 0x2881ff2f, 0xe6a380e6, 0xaecda12a, 0x9bc66842, 0x7d4d9b00,
    0x70330871, 0xd6639cca, 0xb3c9d20e, 0xcb308db3, 0x33c9fc07, 0x3fd4e6ae, 0xdbe9c48b, 0xaadd9db8,
};
unsigned long ecc_512_1[] = {0xbcb9f822, 0x8b352209, 0x406a5e68, 0x7c6d5047, 0x93b97d5f, 0x50d1687b,
                             0xe2d0d48d, 0xff3b1f78, 0xf4d0098e, 0xb43b62ee, 0xb5d916c1, 0x85ed9f70,
                             0x9c4c6a93, 0x5a21322e, 0xd82ed964, 0x81aee4bd};

unsigned long ecc_512_2[] = {
    0x3ad80892, 0x78cd1e0f, 0xa8f05406, 0xd1ca2b2f, 0x8a2763ae, 0x5bca4bd8, 0x4a5f485e, 0xb2dcde49,
    0x881f8111, 0xa000c55b, 0x24a57b1a, 0xf209f700, 0xcf7822fd, 0xc0eabfa9, 0x566332ec, 0x7dde385d,
};
unsigned long ecc_512_3[] = {
    0x77fc94ca, 0xe7c1ac4d, 0x2bf2c7b9, 0x7f1117a7, 0x8b9ac8b5, 0x0a2ef1c9, 0xa8253aa1, 0x2ded5d5a,
    0xea9863bc, 0xa83441ca, 0x3df91610, 0x94cbdd8d, 0xac234cc5, 0xe2327145, 0x8b603b89, 0x7830a331,
};

unsigned long ecc_512_Qx[] = {
    0x6555bc05, 0xf6af81e9, 0xe904bbba, 0x568a0005, 0x68ad202b, 0xb58ef718, 0x6aca3543, 0x6cbc34dd,
    0xb65b046c, 0x73c521f3, 0xe155e9b2, 0xfdf111bf, 0x208b1c66, 0xba51dff9, 0x9caac614, 0x97ba08a5,
};

unsigned long ecc_512_Qy[] = {
    0xedbf9ac6, 0x961db6f3, 0x748facc6, 0xc0db0a7c, 0x092a869a, 0x3672880a, 0xee369fc2, 0x1127b4ee,
    0xc16aa381, 0x0f31b212, 0x5902cd67, 0x18bbc4d6, 0x2f178cf5, 0xa2251478, 0x267bcc0c, 0x080f47aa,
};

#endif

#endif
char pendingdate[20] = {0x00, 0x30, 0x31, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48,
                        0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x04, 0x20};

const char *g_base64_char = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

char base46_map[] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
                     'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
                     'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
                     'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'};

typedef struct aes_cipher_s
{
    void *             file_Virt;
    int                filelen;
    int                keylen;
    int                hwkey;
    int                hwkey_flag;
    int                b_decrypt;
    int                EFFI;
    MDRV_AES_ALGO_MODE E_ALGO_MODE;
    char               aeskey[32];
    int                aeskey_flag;
    void *             p_inbuf_va;
    void *             p_outbuf_va;
    unsigned long long inbuf_pa;  // input phy addr
    unsigned long long outbuf_pa; // output phy addr
    int                t_align;   // test align
    int                cut_len;
} aes_cipher_t;

typedef struct parseinfo
{
    unsigned char *buf_offset;
    unsigned char *publickey;
    unsigned char *private_Ekey;
    unsigned char *public_Ekey;
    unsigned int   buf_left_bytes;
    unsigned int   rsa_size;
} parseinfo_t;

typedef enum
{
    E_RSA_TEST_ENCRYPT_DECRYPT = 0, // default RSA value to encrypt and decrypt
    E_RSA_TEST_SIGN_VERIFY     = 1, // default RSA value to Sign and verify
    E_RSA_TEST_ALL             = 2, // default RSA value to encrypt/Sign and decrypt/verify. about 0 and 1
    E_RSA_OUTBINARY_SIGN       = 3, // use input RSA value and binary to Sign
    E_RSA_OUTBINARY_VERIFY     = 4, // use input RSA value and binary to verify
    E_RSA_NULL_OP              = 5, // NULL OP
} UT_RSA_MODE;
